-- Load Avantrix Library
local lib = loadstring(game:HttpGet("https://raw.githubusercontent.com/xenlua/Xens/refs/heads/main/ui/Avantrix.lua"))() 
local FlagsManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/xenlua/Xens/refs/heads/main/ui/Flags"))()

local LPH_JIT_MAX = function(...) return(...) end;
local LPH_NO_VIRTUALIZE = function(...) return(...) end;
local LPH_CRASH = function(...) while task.wait() do game:GetService("ScriptContext"):SetTimeout(math.huge);while true do while true do while true do while true do while true do while true do while true do while true do print("noob") end end end end end end end end end end;
local LRM_UserNote = "Owner"
local LRM_ScriptVersion = "v20"
local ClonedPrint = print

if LPH_OBFUSCATED then
    ClonedPrint = print
    print = function(...)end
    warn = function(...)end

    local PreventSkidsToMakeGayThings = loadstring(game:HttpGet("https://raw.githubusercontent.com/Hosvile/InfiniX/a40a158d22fd4f4733beb2f67379866ccb17906f/Library/Anti/AntiDebug/main.lua", true))()

    if not (type(PreventSkidsToMakeGayThings) == "table") then
        LPH_CRASH()
    end
end

repeat task.wait() until game.Players.LocalPlayer and game.Players.LocalPlayer.Character

if not game:IsLoaded() then
    game.Loaded:Wait()
end

-- Format version function
function formatVersion(version)
    local formattedVersion = "v" .. version:sub(2):gsub(".", "%0.")
    return formattedVersion:sub(1, #formattedVersion - 1)
end

-- Initialize main GUI
local main = lib:Load({
    Title = 'GAG '..formatVersion(LRM_ScriptVersion)..' | ' .. gradient("Avantrix").. " | ",
    ToggleButton = "rbxassetid://100227182680708",
})

-- Game Services
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")

-- Variables
local LocalPlayer = Players.LocalPlayer

-- TrowelRemote detection
local TrowelRemote = ReplicatedStorage:FindFirstChild("GameEvents") and ReplicatedStorage.GameEvents:FindFirstChild("TrowelRemote")

-- Create tabs
local tabs = {
    Welcome = main:AddTab("Information"),
    Main = main:AddTab("Main"),
    Auto = main:AddTab("Auto"),
    Shop = main:AddTab("Shop"),
    Event = main:AddTab("Event"),
    Settings = main:AddTab("Settings"),
}

main:SelectTab()

-- Create sections
local sections = {
    Welcome = tabs.Welcome:AddSection({Defualt = true, Locked = true}),
    SeedBuyer = tabs.Shop:AddSection({Title = "Seed Purchasing", Description = "Auto buy seeds with stock detection", Defualt = true, Locked = false}),
    GearBuyer = tabs.Shop:AddSection({Title = "Gear Purchasing", Description = "Auto buy gears with stock detection", Defualt = true, Locked = false}),
    Teleport = tabs.Main:AddSection({Title = "Teleport", Description = "Teleportation utilities", Defualt = true, Locked = false}),
    Fruit = tabs.Main:AddSection({Title = "Fruit Management", Description = "Fruit collection and selling", Defualt = false, Locked = false}),
    AutoHarvest = tabs.Auto:AddSection({Title = "Mutasi Collection", Description = "Collect fruits with specific mutations", Defualt = false, Locked = false}),
    UIControls = tabs.Shop:AddSection({Title = "UI Controls", Description = "Toggle game UIs", Defualt = true, Locked = false}),
    NPCSubmission = tabs.Event:AddSection({Title = "Zen Event", Description = "Submit plants to NPCs with Tranquil detection", Defualt = true, Locked = false}),
}

-- Variables
local var = {}

-- Initialize welcome paragraph
var.WelcomeParagraph = sections.Welcome:AddParagraph({
    Title = gradient("Loading..."), 
    Description = "Please wait..\nIf you've been stuck on this for a long time please join our discord and report it.\nYou could also try:\n- Re-execute\n- Rejoin"
})

var.WelcomeParagraph:SetTitle(gradient("Welcome to GAG Hub!"))
var.WelcomeParagraph:SetDesc([[<font color="rgb(255,255,255)">NEWS:</font>


<b><font color='rgb(255, 255, 255)'>----------------------------------------[Features]--------------------------------------</font></b>

<font color="rgb(255,255,255)">Version:</font> ]] .. formatVersion(LRM_ScriptVersion) .. [[

<font color="rgb(255,255,255)">Features:</font>
- Smart Stock Detection System
- Auto Buy with Stock Monitoring
- Mutasi Collection System
- Auto Sell & Teleport
- Tranquil Detection for NPC Submission

<font color="rgb(255,255,255)">Instructions:</font>
1. Select items from dropdown (multiple selection)
2. Enable auto buy - script will check stock automatically
3. Script only buys when stock > 0 (X1 Stock or higher)
4. Auto stops when stock is empty (X0 Stock)
5. NPC submission only works when Tranquil mutasi is detected in backpack
6. Join our Discord for support

<font color="rgb(255,255,255)">Discord:</font> discord.gg/cF8YeDPt2G]])

-- Add Discord button
sections.Welcome:AddButton({
    Title = "Copy Discord Link",
    Callback = function()
        setclipboard("https://discord.gg/cF8YeDPt2G")
        lib:Dialog({
            Title = "Success",
            Content = "Discord link copied to clipboard!",
            Buttons = {
                {
                    Title = "OK",
                    Variant = "Primary",
                    Callback = function() end,
                }
            }
        })
    end,
})

-- Variables
local autoSubmit = false
local autoSubmitAllHarvest = false
local fruitThreshold = 10
local autoSell = false
local highlightToggle = false
local currentHighlight = nil
local currentBillboard = nil
local lastBiggest = nil
local savedPosition = nil
local antiAfkEnabled = false
local afkConnection
local mutasiCollectEnabled = false
local infiniteJump = false

-- NEW: Mutasi Collection Variables
local selectedMutasi = {}

-- NPC Submission Variables
local selectedNPC = nil
local autoSubmitToNPC = false

-- FIXED: Valid Mutasi list based on the image attributes
local validMutasi = {
    "Tranquil",
    "Chakra",
    "Foxfire Chakra",
    "Radioactive",
    "Twisted",
    "Shocked",
    "Celestial", 
    "Aurora",
    "Drenched",
    "Sandy",
    "Plasma",
    "Dawnbound",
    "Gold",
    "Rainbow",
    "Wet",
    "Chilled",
    "Pollinated",
    "HoneyGlazed",
    "Voidtouched",
    "Friendbound",
    "Eclipsed",
    "Moonlit"
}

-- Seed Buying Variables with Stock Detection
local validSeeds = {
    "Carrot", "Strawberry", "Blueberry", "Tomato", "Orange Tulip", "Corn", 
    "Daffodil", "Watermelon", "Pumpkin", "Apple", "Bamboo", "Coconut", 
    "Cactus", "Dragon Fruit", "Mango", "Grape","Mushroom","Pepper","Cacao","Beanstalk","Ember Lily","Sugar Apple","Burning Bud"
}
local selectedSeeds = {}
local autoBuyingSelected = false
local autoBuyingAll = false

-- Gear Buying Variables with Stock Detection
local validGears = {
    "Basic Sprinkler", "Advanced Sprinkler", "Godly Sprinkler",
    "Master Sprinkler", "Recall Wrench", "Tanning Mirror", "Trowel", "Watering Can", "Harvest Tool", "Friendship Pot", "Cleaning Spray","Medium Toy", "Medium Treat","Levelup Lollipop"
}
local selectedGears = {}
local autoBuyingSelectedGear = false
local autoBuyingAllGears = false

-- Available NPCs for submission
local availableNPCs = {
    "Channeller",
    "Zen Shop"
}

-- Get RemoteEvents
local rs = ReplicatedStorage
local buyEvent = rs:FindFirstChild("GameEvents") and rs.GameEvents:FindFirstChild("BuySeedStock")
local buyGearEvent = rs:FindFirstChild("GameEvents") and rs.GameEvents:FindFirstChild("BuyGearStock")

-- NPC RemoteEvents
local ZenQuestRemoteEvent = rs:FindFirstChild("GameEvents") and rs.GameEvents:FindFirstChild("ZenQuestRemoteEvent")
local ZenAuraRemoteEvent = rs:FindFirstChild("GameEvents") and rs.GameEvents:FindFirstChild("ZenAuraRemoteEvent")

game:GetService("Players").LocalPlayer.PlayerGui.Teleport_UI.Frame.Gear.Visible = true
game:GetService("Players").LocalPlayer.PlayerGui.Teleport_UI.Frame.Pets.Visible = true

-- STOCK DETECTION FUNCTIONS
local function getSeedStock(seedName)
    local success, stock = pcall(function()
        local seedShop = LocalPlayer.PlayerGui:FindFirstChild("Seed_Shop")
        if not seedShop then return 0 end
        
        local frame = seedShop:FindFirstChild("Frame")
        if not frame then return 0 end
        
        local scrollingFrame = frame:FindFirstChild("ScrollingFrame")
        if not scrollingFrame then return 0 end
        
        local seedFrame = scrollingFrame:FindFirstChild(seedName)
        if not seedFrame then return 0 end
        
        local mainFrame = seedFrame:FindFirstChild("Main_Frame")
        if not mainFrame then return 0 end
        
        local stockText = mainFrame:FindFirstChild("Stock_Text")
        if not stockText then return 0 end
        
        -- Parse stock text (format: "X15 Stock" or "X0 Stock")
        local stockNumber = string.match(stockText.Text, "X(%d+)")
        return tonumber(stockNumber) or 0
    end)
    
    if success then
        return stock
    else
        return 0
    end
end

local function getGearStock(gearName)
    local success, stock = pcall(function()
        local gearShop = LocalPlayer.PlayerGui:FindFirstChild("Gear_Shop")
        if not gearShop then return 0 end
        
        local frame = gearShop:FindFirstChild("Frame")
        if not frame then return 0 end
        
        local scrollingFrame = frame:FindFirstChild("ScrollingFrame")
        if not scrollingFrame then return 0 end
        
        local gearFrame = scrollingFrame:FindFirstChild(gearName)
        if not gearFrame then return 0 end
        
        local mainFrame = gearFrame:FindFirstChild("Main_Frame")
        if not mainFrame then return 0 end
        
        local stockText = mainFrame:FindFirstChild("Stock_Text")
        if not stockText then return 0 end
        
        -- Parse stock text (format: "X15 Stock" or "X0 Stock")
        local stockNumber = string.match(stockText.Text, "X(%d+)")
        return tonumber(stockNumber) or 0
    end)
    
    if success then
        return stock
    else
        return 0
    end
end

-- ENHANCED BUYING FUNCTIONS WITH STOCK DETECTION
local function buySeedWithStockCheck(seedName)
    local stock = getSeedStock(seedName)
    if stock > 0 then
        if buyEvent then
            buyEvent:FireServer(seedName)
            return true, stock
        end
    end
    return false, stock
end

local function buyGearWithStockCheck(gearName)
    local stock = getGearStock(gearName)
    if stock > 0 then
        if buyGearEvent then
            buyGearEvent:FireServer(gearName)
            return true, stock
        end
    end
    return false, stock
end

-- Helper Functions using GetFarm module
local function getPlayerFarm()
    local success, result = pcall(function()
        local get_farm = require(ReplicatedStorage.Modules.GetFarm)
        return get_farm(LocalPlayer)
    end)
    
    if success and result then
        return result
    else
        return nil
    end
end

-- NEW: Tranquil Detection Function
local function hasTranquilInBackpack()
    local backpack = LocalPlayer:FindFirstChild("Backpack")
    if not backpack then return false end
    
    for _, tool in pairs(backpack:GetChildren()) do
        if tool:IsA("Tool") then
            -- Check if the tool name contains "Tranquil"
            -- Format examples: "[Windstruck, Tranquil] Mango [20.09kg]"
            if string.find(tool.Name, "Tranquil") then
                return true, tool.Name
            end
        end
    end
    
    return false, nil
end

-- NPC Submission Functions with Tranquil Detection
local function submitToNPC(npcName)
    -- Check if player has Tranquil mutasi in backpack
    local hasTranquil, tranquilItemName = hasTranquilInBackpack()
    
    if not hasTranquil then
        lib:Notification('Warning', 'No Tranquil mutasi found in backpack! Cannot submit to NPC.', 5)
        return false
    end
    
    lib:Notification('Info', 'Tranquil detected: ' .. tranquilItemName .. ' - Submitting to ' .. npcName, 3)
    
    if npcName == "Channeller" then
        if ZenQuestRemoteEvent then
            ZenQuestRemoteEvent:FireServer("SubmitAllPlants")
            return true
        end
    elseif npcName == "Zen Shop" then
        if ZenAuraRemoteEvent then
            ZenAuraRemoteEvent:FireServer("SubmitAllPlants")
            return true
        end
    end
    return false
end

local function autoSubmitToNPCLoop()
    while autoSubmitToNPC do
        if selectedNPC then
            local hasTranquil, tranquilItemName = hasTranquilInBackpack()
            
            if hasTranquil then
                local success = submitToNPC(selectedNPC)
                if success then
                    lib:Notification('Success', 'Submitted plants to ' .. selectedNPC .. ' with Tranquil: ' .. tranquilItemName, 3)
                end
            else
                -- Wait longer if no Tranquil is found
                task.wait(5)
            end
        end
        task.wait(0.1)
    end
end

local function getFruitCount()
    local bag = LocalPlayer.Backpack
    local count = 0
    for _, v in pairs(bag:GetChildren()) do
        if v:FindFirstChild("Weight") and v:FindFirstChild("Variant") then
            count = count + 1
        end
    end
    return count
end

local function removeHighlight()
    if currentHighlight then
        currentHighlight:Destroy()
        currentHighlight = nil
    end
    if currentBillboard then
        currentBillboard:Destroy()
        currentBillboard = nil
    end
end

local function highlightBiggestFruit()
    local farm = getPlayerFarm()
    if not farm then
        removeHighlight()
        lastBiggest = nil
        return
    end

    local plants = farm:FindFirstChild("Important") and farm.Important:FindFirstChild("Plants_Physical")
    if not plants then
        removeHighlight()
        lastBiggest = nil
        return
    end

    local biggest, maxWeight = nil, -math.huge
    for _, fruit in ipairs(plants:GetChildren()) do
        local weightObj = fruit:FindFirstChild("Weight")
        if weightObj and tonumber(weightObj.Value) and tonumber(weightObj.Value) > maxWeight then
            biggest = fruit
            maxWeight = tonumber(weightObj.Value)
        end
    end

    if biggest ~= lastBiggest then
        removeHighlight()
        lastBiggest = biggest
        if biggest and biggest:IsA("Model") then
            local highlight = Instance.new("Highlight")
            highlight.FillColor = Color3.fromRGB(0, 255, 0)
            highlight.OutlineColor = Color3.fromRGB(0, 150, 0)
            highlight.FillTransparency = 0.3
            highlight.OutlineTransparency = 0
            highlight.Adornee = biggest
            highlight.Parent = biggest
            currentHighlight = highlight

            local head = biggest:FindFirstChildWhichIsA("BasePart")
            if head then
                local bb = Instance.new("BillboardGui")
                bb.Size = UDim2.new(0, 100, 0, 40)
                bb.AlwaysOnTop = true
                bb.StudsOffset = Vector3.new(0, 3, 0)
                bb.Adornee = head
                bb.Parent = head

                local label = Instance.new("TextLabel")
                label.Size = UDim2.new(1, 0, 1, 0)
                label.BackgroundTransparency = 1
                label.TextColor3 = Color3.fromRGB(0, 255, 0)
                label.TextStrokeTransparency = 0.2
                label.TextStrokeColor3 = Color3.fromRGB(0, 0, 0)
                label.TextScaled = true
                label.Font = Enum.Font.FredokaOne
                label.Text = "Weight: " .. string.format("%.2f", maxWeight) .. "kg"
                label.Parent = bb

                currentBillboard = bb
            end
        end
    end
end

local function savePosition()
    local char = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
    local hrp = char:FindFirstChild("HumanoidRootPart")
    if hrp then
        savedPosition = hrp.Position
        lib:Notification('Success', 'Position saved!', 3)
    else
        lib:Notification('Error', 'Could not save position (HumanoidRootPart missing).', 3)
    end
end

local function teleportTo(pos)
    local char = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
    local hrp = char:FindFirstChild("HumanoidRootPart")
    if not hrp then
        lib:Notification('Error', 'Could not teleport (HumanoidRootPart missing).', 3)
        return
    end
    if typeof(pos) == "Vector3" then
        hrp.CFrame = CFrame.new(pos)
    elseif typeof(pos) == "string" then
        local x, y, z = string.match(pos, "Vector3%s*%(([^,]+),%s*([^,]+),%s*([^)]+)%)")
        if x and y and z then
            hrp.CFrame = CFrame.new(tonumber(x), tonumber(y), tonumber(z))
        end
    end
end

local function sellInventory()
    ReplicatedStorage:WaitForChild("GameEvents"):WaitForChild("Sell_Inventory"):FireServer()
    lib:Notification('Success', 'Inventory sold!', 3)
end

local function tpAndSell()
    local char = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
    local hrp = char:FindFirstChild("HumanoidRootPart")
    if hrp then
        hrp.CFrame = CFrame.new(
            86.5854721, 2.76619363, 0.426784277,
            0, 0, -1,
            0, 1, 0,
            1, 0, 0
        )
        task.wait(0.2)
        ReplicatedStorage:WaitForChild("GameEvents"):WaitForChild("Sell_Inventory"):FireServer()
        lib:Notification('Success', 'Teleported and sold inventory!', 3)
    else
        lib:Notification('Error', 'HumanoidRootPart not found!', 3)
    end
end

-- FIXED: Mutasi collection filter function based on attributes
local function mutasiCollectFilter(item, selectedMutasi)
    -- Check if item exists and has attributes
    if not item then return false end
    
    -- If no specific mutasi selected, collect all items with any mutasi
    if #selectedMutasi == 0 then
        -- Check if item has any mutasi attribute set to true
        for _, mutasi in pairs(validMutasi) do
            local attributeValue = item:GetAttribute(mutasi)
            if attributeValue == true then
                return true
            end
        end
        return false
    end
    
    -- If specific mutasi selected, check if item has any of the selected ones
    for _, mutasi in pairs(selectedMutasi) do
        local attributeValue = item:GetAttribute(mutasi)
        if attributeValue == true then
            return true
        end
    end
    
    return false
end

-- ENHANCED SEED BUYING SECTION WITH STOCK DETECTION
sections.SeedBuyer:AddDropdown("SeedSelect", {
    Title = "Select Seeds to Buy",
    Description = "Choose which seeds you want to auto buy (with stock detection)",
    Options = validSeeds,
    Default = {},
    PlaceHolder = "Select seeds",
    Multiple = true,
    Callback = function(selected)
        selectedSeeds = selected
        if #selectedSeeds > 0 then
            local seedList = table.concat(selectedSeeds, ", ")
            lib:Notification('Info', 'Selected seeds: ' .. seedList, 5)
        else
            lib:Notification('Info', 'No seeds selected', 3)
        end
    end
})

sections.SeedBuyer:AddToggle("AutoBuySelected", {
    Title = "Auto Buy Selected Seeds",
    Default = false,
    Description = "Continuously buy ONLY selected seeds when stock",
    Callback = function(value)
        autoBuyingSelected = value
        if value then
            if #selectedSeeds > 0 then
                local seedList = table.concat(selectedSeeds, ", ")
                task.spawn(function()
                    while autoBuyingSelected do
                        local anyPurchased = false
                        for _, seed in ipairs(selectedSeeds) do
                            if not autoBuyingSelected then break end
                            local success, stock = buySeedWithStockCheck(seed)
                            if success then
                                anyPurchased = true
                            end
                            task.wait(0.01)
                        end
                        
                        -- If no items were purchased (all out of stock), wait longer
                        if not anyPurchased then
                            task.wait(2)
                        else
                            task.wait(0.1)
                        end
                    end
                end)
            else
                lib:Notification('Warning', 'No seeds selected! Please select seeds from dropdown first.', 3)
                autoBuyingSelected = false
            end
        else
            lib:Notification('Info', 'Smart auto buy selected seeds disabled', 3)
        end
    end,
})

sections.SeedBuyer:AddToggle("AutoBuyAll", {
    Title = "Auto Buy All Seeds (Smart Stock)",
    Default = false,
    Description = "Continuously buy ALL available seeds when stock",
    Callback = function(value)
        autoBuyingAll = value
        if value then
            task.spawn(function()
                while autoBuyingAll do
                    local anyPurchased = false
                    for _, seed in ipairs(validSeeds) do
                        if not autoBuyingAll then break end
                        local success, stock = buySeedWithStockCheck(seed)
                        if success then
                            anyPurchased = true
                        end
                        task.wait(0.01)
                    end
                    
                    if not anyPurchased then
                        task.wait(2)
                    else
                        task.wait(0.1)
                    end
                end
            end)
        else
            lib:Notification('Info', 'Smart auto buy all seeds disabled', 3)
        end
    end,
})


-- ENHANCED GEAR BUYING SECTION WITH STOCK DETECTION
sections.GearBuyer:AddDropdown("GearSelect", {
    Title = "Select Gears to Buy",
    Description = "Choose which gears you want to auto buy (with stock detection)",
    Options = validGears,
    Default = {},
    PlaceHolder = "Select gears",
    Multiple = true,
    Callback = function(selected)
        selectedGears = selected
        if #selectedGears > 0 then
            local gearList = table.concat(selectedGears, ", ")
            lib:Notification('Info', 'Selected gears: ' .. gearList, 5)
        else
            lib:Notification('Info', 'No gears selected', 3)
        end
    end
})
sections.GearBuyer:AddToggle("AutoBuySelectedGear", {
    Title = "Auto Buy Selected Gears",
    Default = false,
    Description = "Continuously buy ONLY selected gears when stock",
    Callback = function(value)
        autoBuyingSelectedGear = value
        if value then
            if #selectedGears > 0 then
                local gearList = table.concat(selectedGears, ", ")
                task.spawn(function()
                    while autoBuyingSelectedGear do
                        local anyPurchased = false
                        for _, gear in ipairs(selectedGears) do
                            if not autoBuyingSelectedGear then break end
                            local success, stock = buyGearWithStockCheck(gear)
                            if success then
                                anyPurchased = true
                            end
                            task.wait(0.01)
                        end
                        
                        if not anyPurchased then
                            task.wait(2)
                        else
                            task.wait(0.1)
                        end
                    end
                end)
            else
                lib:Notification('Warning', 'No gears selected! Please select gears from dropdown first.', 3)
                autoBuyingSelectedGear = false
            end
        else
            lib:Notification('Info', 'Smart auto buy selected gears disabled', 3)
        end
    end,
})

sections.GearBuyer:AddToggle("AutoBuyAllGears", {
    Title = "Auto Buy All Gears (Smart Stock)",
    Default = false,
    Description = "Continuously buy ALL available gears when stock",
    Callback = function(value)
        autoBuyingAllGears = value
        if value then
            task.spawn(function()
                while autoBuyingAllGears do
                    local anyPurchased = false
                    for _, gear in ipairs(validGears) do
                        if not autoBuyingAllGears then break end
                        local success, stock = buyGearWithStockCheck(gear)
                        if success then
                            anyPurchased = true
                        end
                        task.wait(0.01)
                    end
                    if not anyPurchased then
                        task.wait(2)
                    else
                        task.wait(0.1)
                    end
                end
            end)
        else
            lib:Notification('Info', 'Smart auto buy all gears disabled', 3)
        end
    end,
})

-- Teleport Section
sections.Teleport:AddButton({
    Title = "Save Position",
    Callback = savePosition
})

sections.Teleport:AddButton({
    Title = "Teleport to Saved Position",
    Callback = function()
        if savedPosition then
            teleportTo(savedPosition)
            lib:Notification('Success', 'Teleported to saved position!', 3)
        else
            lib:Notification('Warning', 'No position saved yet.', 3)
        end
    end
})

-- Fruit Management Section
sections.Fruit:AddSlider("FruitThreshold", {
    Title = "Fruit Threshold",
    Description = "Number of fruits before auto-selling",
    Default = 10,
    Min = 1,
    Max = 200,
    Increment = 1,
    Callback = function(value)
        fruitThreshold = value
    end,
})

sections.Fruit:AddToggle("AutoSell", {
    Title = "Auto Sell",
    Default = false,
    Description = "Automatically teleport and sell when threshold reached",
    Callback = function(state)
        autoSell = state
        if autoSell then
            lib:Notification('Success', 'Auto TP & Sell enabled.', 3)
            task.spawn(function()
                while autoSell do
                    if getFruitCount() >= fruitThreshold then
                        tpAndSell()
                        task.wait(2)
                    end
                    task.wait(1)
                end
            end)
        else
            lib:Notification('Info', 'Auto TP & Sell disabled.', 3)
        end
    end,
})

sections.Fruit:AddToggle("ShowBiggest", {
    Title = "Show Biggest Fruit",
    Default = false,
    Description = "Highlight the biggest fruit in your farm",
    Callback = function(state)
        highlightToggle = state
        if highlightToggle then
            highlightBiggestFruit()
            conn = RunService.RenderStepped:Connect(function()
                if highlightToggle then
                    highlightBiggestFruit()
                end
            end)
        else
            if conn then conn:Disconnect() end
            removeHighlight()
            lastBiggest = nil
        end
    end,
})

sections.Fruit:AddButton({
    Title = "Sell Inventory",
    Callback = sellInventory
})

sections.Fruit:AddButton({
    Title = "TP, Sell, Return",
    Callback = function()
        savePosition()
        local char = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
        local hrp = char:FindFirstChild("HumanoidRootPart")
        if not hrp then return end
        hrp.CFrame = CFrame.new(86.57965850830078, 2.999999761581421, 0.4267919063568115)
        task.wait(0.25)
        sellInventory()
        task.wait(0.2)
        if savedPosition then
            teleportTo(savedPosition)
            lib:Notification('Success', 'Returned to saved position!', 3)
        end
    end
})

-- FIXED: Mutasi Collection Section
sections.AutoHarvest:AddDropdown("MutasiSelect", {
    Title = "Select Mutasi to Collect",
    Description = "Choose which mutasi you want to collect (leave empty for all mutasi)",
    Options = validMutasi,
    Default = {},
    PlaceHolder = "Select mutasi (optional)",
    Multiple = true,
    Callback = function(selected)
        selectedMutasi = selected
        if #selectedMutasi > 0 then
            local mutasiList = table.concat(selectedMutasi, ", ")
            lib:Notification('Info', 'Selected mutasi: ' .. mutasiList, 5)
        else
            lib:Notification('Info', 'No mutasi selected - will collect all mutasi fruits', 3)
        end
    end
})

sections.AutoHarvest:AddToggle("MutasiAutoCollect", {
    Title = "Auto Collect Mutasi",
    Default = false,
    Description = "Automatically collect fruits with selected mutasi based on attributes",
    Callback = function(state)
        mutasiCollectEnabled = state
        if mutasiCollectEnabled then
            lib:Notification('Success', 'Auto Collect Mutasi enabled!', 3)
            task.spawn(function()
                while mutasiCollectEnabled do
                    local players = game:GetService("Players")
                    local replicated_storage = game:GetService("ReplicatedStorage")
                    local get_farm = require(replicated_storage.Modules.GetFarm)
                    local byte_net_reliable = replicated_storage:WaitForChild("ByteNetReliable")
                    local buffer = buffer.fromstring("\1\1\0\1")

                    local local_player = players.LocalPlayer
                    local farm = get_farm(local_player)
                    if not farm or not farm.Important or not farm.Important:FindFirstChild("Plants_Physical") then
                        lib:Notification('Warning', 'Could not find your farm plants.', 3)
                        break
                    end

                    local collectedCount = 0
                    for _, plant in next, farm.Important.Plants_Physical:GetChildren() do
                        -- Check plant itself for mutasi attributes
                        if mutasiCollectFilter(plant, selectedMutasi) then
                            pcall(function()
                                byte_net_reliable:FireServer(buffer, { plant })
                                collectedCount = collectedCount + 1
                            end)
                        end
                        
                        -- Check fruits inside plant for mutasi attributes
                        if plant:FindFirstChild("Fruits") then
                            for _, fruit in pairs(plant.Fruits:GetChildren()) do
                                if mutasiCollectFilter(fruit, selectedMutasi) then
                                    pcall(function()
                                        byte_net_reliable:FireServer(buffer, { fruit })
                                        collectedCount = collectedCount + 1
                                    end)
                                end
                            end
                        end
                    end
                    
                    task.wait(3)
                end
                lib:Notification('Info', 'Auto Collect Mutasi disabled!', 3)
            end)
        else
            lib:Notification('Info', 'Auto Collect Mutasi disabled!', 3)
        end
    end,
})

-- UI Controls Section
sections.UIControls:AddButton({
    Title = "Seed Shop",
    Callback = function()
        local gui = LocalPlayer.PlayerGui
        gui.Seed_Shop.Enabled = true
        gui.Gear_Shop.Enabled = false
        gui.HoneyEventShop_UI.Enabled = false
        gui.CosmeticShop_UI.Enabled = false
        lib:Notification('Info', 'Seed Shop opened', 3)
    end,
})

sections.UIControls:AddButton({
    Title = "Gear Shop",
    Callback = function()
        local gui = LocalPlayer.PlayerGui
        gui.Seed_Shop.Enabled = false
        gui.Gear_Shop.Enabled = true
        gui.HoneyEventShop_UI.Enabled = false
        gui.CosmeticShop_UI.Enabled = false
        lib:Notification('Info', 'Gear Shop opened', 3)
    end,
})

sections.UIControls:AddButton({
    Title = "Hide All Shops",
    Callback = function()
        local gui = LocalPlayer.PlayerGui
        gui.Seed_Shop.Enabled = false
        gui.Gear_Shop.Enabled = false
        gui.HoneyEventShop_UI.Enabled = false
        gui.CosmeticShop_UI.Enabled = false
        lib:Notification('Info', 'All shops hidden', 3)
    end,
})

-- ENHANCED NPC Submission Section with Tranquil Detection
sections.NPCSubmission:AddButton({
    Title = "Check Tranquil in Backpack",
    Description = "Check if you have any Tranquil mutasi items in backpack",
    Callback = function()
        local hasTranquil, tranquilItemName = hasTranquilInBackpack()
        
        if hasTranquil then
            lib:Notification('Success', 'Tranquil found: ' .. tranquilItemName, 5)
        else
            lib:Notification('Warning', 'No Tranquil mutasi found in backpack!', 5)
        end
    end,
})

sections.NPCSubmission:AddDropdown("NPCSelect", {
    Title = "Select Give to NPC",
    Description = "Choose which NPC to submit plants to (requires Tranquil mutasi)",
    Options = {"Channeller", "Zen Shop"},
    Default = "",
    PlaceHolder = "Select NPC",
    Multiple = false,
    Callback = function(selected)
        if type(selected) == "table" and #selected > 0 then
            selectedNPC = selected[1]
        elseif type(selected) == "string" then
            selectedNPC = selected
        else
            selectedNPC = nil
        end
        
        if selectedNPC then
            lib:Notification('Info', 'Selected NPC: ' .. selectedNPC, 3)
        else
            lib:Notification('Info', 'No NPC selected', 3)
        end
    end
})
sections.NPCSubmission:AddToggle("AutoSubmitNPC", {
    Title = "Auto Submit to NPC (Tranquil Required)",
    Default = false,
    Description = "Automatically submit plants to selected NPC when Tranquil mutasi is detected",
    Callback = function(value)
        autoSubmitToNPC = value
        if value then
            if selectedNPC then
                task.spawn(autoSubmitToNPCLoop)
            else
                lib:Notification('Warning', 'Please select an NPC first!', 3)
                autoSubmitToNPC = false
            end
        else
            lib:Notification('Info', 'Auto submit to NPC disabled!', 3)
        end
    end,
})

-- Config System
FlagsManager:SetLibrary(lib)
FlagsManager:SetIgnoreIndexes({})
FlagsManager:SetFolder("Avantrix/GAG")
FlagsManager:InitSaveSystem(tabs.Settings)
