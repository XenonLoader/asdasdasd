-- Load Avantrix Library
local lib = loadstring(game:HttpGet("https://raw.githubusercontent.com/xenlua/Xens/refs/heads/main/ui/Avantrix.lua"))() 
local FlagsManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/xenlua/Xens/refs/heads/main/ui/Flags"))()

local LPH_JIT_MAX = function(...) return(...) end;
local LPH_NO_VIRTUALIZE = function(...) return(...) end;
local LPH_CRASH = function(...) while task.wait() do game:GetService("ScriptContext"):SetTimeout(math.huge);while true do while true do while true do while true do while true do while true do while true do while true do print("noob") end end end end end end end end end end;
local LRM_UserNote = "Owner"
local LRM_ScriptVersion = "v16"
local ClonedPrint = print

if LPH_OBFUSCATED then
    ClonedPrint = print
    print = function(...)end
    warn = function(...)end

    local PreventSkidsToMakeGayThings = loadstring(game:HttpGet("https://raw.githubusercontent.com/Hosvile/InfiniX/a40a158d22fd4f4733beb2f67379866ccb17906f/Library/Anti/AntiDebug/main.lua", true))()

    if not (type(PreventSkidsToMakeGayThings) == "table") then
        LPH_CRASH()
    end
end

repeat task.wait() until game.Players.LocalPlayer and game.Players.LocalPlayer.Character

if not game:IsLoaded() then
    game.Loaded:Wait()
end

-- Format version function
function formatVersion(version)
    local formattedVersion = "v" .. version:sub(2):gsub(".", "%0.")
    return formattedVersion:sub(1, #formattedVersion - 1)
end

-- Initialize main GUI
local main = lib:Load({
    Title = 'GAG '..formatVersion(LRM_ScriptVersion)..' | ' .. gradient("Avantrix").. " | ",
    ToggleButton = "rbxassetid://100227182680708",
})

-- Game Services
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")

-- Variables
local LocalPlayer = Players.LocalPlayer

-- TrowelRemote detection
local TrowelRemote = ReplicatedStorage:FindFirstChild("GameEvents") and ReplicatedStorage.GameEvents:FindFirstChild("TrowelRemote")

-- Create tabs
local tabs = {
    Welcome = main:AddTab("Information"),
    Main = main:AddTab("Main"),
    Auto = main:AddTab("Auto"),
    Shop = main:AddTab("Shop"),
    Event = main:AddTab("Event"),
    Settings = main:AddTab("Settings"),
}

main:SelectTab()

-- Create sections
local sections = {
    Welcome = tabs.Welcome:AddSection({Defualt = true, Locked = true}),
    SeedBuyer = tabs.Shop:AddSection({Title = "Seed Purchasing", Description = "Auto buy ALL seeds when stock & money available", Defualt = true, Locked = false}),
    GearBuyer = tabs.Shop:AddSection({Title = "Gear Purchasing", Description = "Auto buy ALL gears when stock & money available", Defualt = true, Locked = false}),
    ZenShop = tabs.Shop:AddSection({Title = "Zen Shop", Description = "Auto buy ALL Zen items when stock & Chi available", Defualt = true, Locked = false}),
    Teleport = tabs.Main:AddSection({Title = "Teleport", Description = "Teleportation utilities", Defualt = true, Locked = false}),
    Fruit = tabs.Main:AddSection({Title = "Fruit Management", Description = "Fruit collection and selling", Defualt = false, Locked = false}),
    AutoHarvest = tabs.Auto:AddSection({Title = "Mutasi Collection", Description = "Collect fruits with specific mutations", Defualt = false, Locked = false}),
    NPCSubmission = tabs.Event:AddSection({Title = "Zen Event", Description = "Submit plants to NPCs with Tranquil detection", Defualt = true, Locked = false}),
}

-- Variables
local var = {}

-- Initialize welcome paragraph
var.WelcomeParagraph = sections.Welcome:AddParagraph({
    Title = gradient("Loading..."), 
    Description = "Please wait..\nIf you've been stuck on this for a long time please join our discord and report it.\nYou could also try:\n- Re-execute\n- Rejoin"
})

var.WelcomeParagraph:SetTitle(gradient("Welcome to GAG Hub!"))
var.WelcomeParagraph:SetDesc([[<font color="rgb(255,255,255)">NEWS:</font>
[+] ADDED Money Detection System - Checks player balance before purchase
[+] ENHANCED Cost Verification - Verifies item cost and stock availability
[+] SMART Purchase Logic - Only buys when both stock > 0 AND money >= cost
[+] IMPROVED Error Handling - Better feedback for insufficient funds
[+] NEW Zen Shop Restock Feature - Auto restock when needed
[+] T-Value Detection System - Stop purchasing at specified T threshold

<b><font color='rgb(255, 255, 255)'>----------------------------------------[Features]--------------------------------------</font></b>

<font color="rgb(255,255,255)">Version:</font> ]] .. formatVersion(LRM_ScriptVersion) .. [[

<font color="rgb(255,255,255)">Features:</font>
- ENHANCED Auto Purchase with Money Detection
- SMART Stock & Cost Verification System
- Automatic Balance Checking before purchases
- Chi Detection System (Auto stop when not enough Chi)
- Zen Shop Auto Restock Feature
- T-Value Stop Detection (Stop at specified T threshold)
- Mutasi Collection System
- Auto Sell & Teleport
- Tranquil Detection for NPC Submission
- Zen Shop Auto Buying with Chi monitoring

<font color="rgb(255,255,255)">Instructions:</font>
1. Select items from dropdown (multiple selection)
2. Enable auto buy - script checks money & stock before purchasing
3. Auto stops when: No stock, insufficient money, or not enough Chi
4. Set T threshold to stop Zen purchases at desired amount
5. Script intelligently waits based on availability
6. NPC submission only works when Tranquil mutasi is detected in backpack
7. Join our Discord for support

<font color="rgb(255,255,255)">Discord:</font> discord.gg/cF8YeDPt2G]])

-- Add Discord button
sections.Welcome:AddButton({
    Title = "Copy Discord Link",
    Callback = function()
        setclipboard("https://discord.gg/cF8YeDPt2G")
        lib:Dialog({
            Title = "Success",
            Content = "Discord link copied to clipboard!",
            Buttons = {
                {
                    Title = "OK",
                    Variant = "Primary",
                    Callback = function() end,
                }
            }
        })
    end,
})

-- Variables
local autoSubmit = false
local autoSubmitAllHarvest = false
local fruitThreshold = 10
local autoSell = false
local highlightToggle = false
local currentHighlight = nil
local currentBillboard = nil
local lastBiggest = nil
local savedPosition = nil
local antiAfkEnabled = false
local afkConnection
local mutasiCollectEnabled = false
local infiniteJump = false

-- NEW: Mutasi Collection Variables
local selectedMutasi = {}

-- NPC Submission Variables
local selectedNPC = nil
local autoSubmitToNPC = false

-- Chi Detection Variables
local chiDetectionEnabled = true
local lastChiCheck = 0

-- NEW: Zen Shop T Detection Variables
local stopAtTValue = 1.0 -- Default stop at 1T
local tDetectionEnabled = false

-- FIXED: Valid Mutasi list based on the image attributes
local validMutasi = {
    "Wet",
    "Chilled",
    "Frozen",
    "Moonlit",
    "Bloodlit",
    "Shocked",
    "Gold",
    "Rainbow",
    "Pollinated",
    "HoneyGlazed",
    "Windstruck",
    "Burnt",
    "Cooked",
    "Plasma",
    "Heavenly",
    "Molten",
    "Disco",
    "Voidtouched",
    "Twisted",
    "Dawnbound",
    "Sundried",
    "Drenched",
    "Sandy",
    "Wilt",
    "Wiltproof",
    "Aurora",
    "Fried",
    "Cloudtouched",
    "Clay",
    "Ceramic",
    "Amber",
    "OldAmber",
    "AncientAmber",
    "Tempestuous",
    "Paradisal",
    "Infected",
    "Tranquil",
    "Chakra",
    "Foxfire Chakra",
    "Radioactive",
}

-- Seed Buying Variables with Stock Detection
local validSeeds = {
    "Carrot",
    "Strawberry",
    "Blueberry",
    "Orange Tulip",
    "Tomato",
    "Daffodil",
    "Watermelon",
    "Pumpkin",
    "Apple",
    "Bamboo",
    "Coconut",
    "Cactus",
    "Dragon Fruit",
    "Mango",
    "Grape",
    "Mushroom",
    "Pepper",
    "Cacao",
    "Beanstalk",
    "Ember Lily",
    "Sugar Apple",
    "Burning Bud",
    "Giant Pinecone",
    "Monoblooma",
    "Serenity",
    "Taro Flower",
    "Zen Rocks",
    "Firefly Fern",
    "Maple Apple",
    "Zenflare",
    "Soft Sunshine",
    "Spiked Mango",
}

local selectedSeeds = {}
local autoBuyingSelected = false

-- Gear Buying Variables with Stock Detection
local validGears = {
    "Watering Can",
    "Trowel",
    "Recall Wrench",
    "Basic Sprinkler",
    "Advanced Sprinkler",
    "Godly Sprinkler",
    "Master Sprinkler",
    "Firework",
    "Chocolate Sprinkler",
    "Magnifying Glass",
    "Tanning Mirror",
    "Cleaning Spray",
    "Favorite Tool",
    "Harvest Tool",
    "Friendship Pot",
    "Medium Toy",
    "Medium Treat",
    "Level Up Lollipop",
    "Lightning Rod",
    "Berry Blusher Sprinkler",
    "Flower Froster Sprinkler",
    "Honey Sprinkler",
    "Nectar Staff",
    "Pollen Radar",
    "Pet Shard Tranquil",
    "Reclaimer",
    "Shovel",
    "Small Toy",
    "Small Treat",
    "Spice Spritzer Sprinkler",
    "Stalk Sprout Sprinkler",
    "Star Caller",
    "Tranquil Radar",
    "Tropical Mist Sprinkler"
}

local selectedGears = {}
local autoBuyingSelectedGear = false

-- NEW: Zen Shop Variables with Stock Detection
local validZenShop = {
    "Zen Seed Pack",
    "Zen Egg",
    "Hot Spring",
    "Zen Sand",
    "Tranquil Radar",
    "Zenflare",
    "Zen Crate",
    "Soft Sunshine",
    "Koi",
    "Zen Gnome Crate",
    "Spiked Mango",
    "Pet Shard Tranquil"
}

local selectedZenItems = {}
local autoBuyingSelectedZen = false

-- Available NPCs for submission
local availableNPCs = {
    "Channeller",
    "Zen Shop"
}

-- Get RemoteEvents
local rs = ReplicatedStorage
local buyEvent = rs:FindFirstChild("GameEvents") and rs.GameEvents:FindFirstChild("BuySeedStock")
local buyGearEvent = rs:FindFirstChild("GameEvents") and rs.GameEvents:FindFirstChild("BuyGearStock")
local buyZenEvent = rs.GameEvents.BuyEventShopStock
local restockZenEvent = rs.GameEvents.BuyEventShopRestock -- NEW: Restock event

-- NPC RemoteEvents
local ZenQuestRemoteEvent = rs:FindFirstChild("GameEvents") and rs.GameEvents:FindFirstChild("ZenQuestRemoteEvent")
local ZenAuraRemoteEvent = rs:FindFirstChild("GameEvents") and rs.GameEvents:FindFirstChild("ZenAuraRemoteEvent")

game:GetService("Players").LocalPlayer.PlayerGui.Teleport_UI.Frame.Gear.Visible = true
game:GetService("Players").LocalPlayer.PlayerGui.Teleport_UI.Frame.Pets.Visible = true

-- NEW: T-Value Detection Function
local function getRestockTValue()
    local success, tValue = pcall(function()
        local eventShopUI = LocalPlayer.PlayerGui:FindFirstChild("EventShop_UI")
        if not eventShopUI then return 0 end
        
        local frame = eventShopUI:FindFirstChild("Frame")
        if not frame then return 0 end
        
        local frameInner = frame:FindFirstChild("Frame")
        if not frameInner then return 0 end
        
        local restock = frameInner:FindFirstChild("Restock")
        if not restock then return 0 end
        
        local textLabel = restock:FindFirstChild("TextLabel")
        if not textLabel then return 0 end
        
        local text = textLabel.Text
        -- Parse text like "RESTOCK: 4.2T¢" or "RESTOCK: 500K¢"
        local tValueStr = string.match(text, "RESTOCK:%s*([%d%.]+)T¢")
        if tValueStr then
            return tonumber(tValueStr) or 0
        end
        
        -- If no T found, check for other formats and return 0
        return 0
    end)
    
    return success and tValue or 0
end

-- NEW: Check if T threshold is reached
local function isAtTThreshold()
    if not tDetectionEnabled then return false end
    
    local currentT = getRestockTValue()
    return currentT >= stopAtTValue
end

-- NEW: MONEY DETECTION SYSTEM
local function getPlayerMoney()
    local success, money = pcall(function()
        local shecklesUI = LocalPlayer.PlayerGui:FindFirstChild("Sheckles_UI")
        if not shecklesUI then return 0 end
        
        local textLabel = shecklesUI:FindFirstChild("TextLabel")
        if not textLabel then return 0 end
        
        -- Parse money text (format: "100¢" or "15,000,000¢")
        local moneyText = textLabel.Text
        local moneyNumber = string.match(moneyText, "([%d,]+)")
        if moneyNumber then
            -- Remove commas and convert to number
            local cleanNumber = string.gsub(moneyNumber, ",", "")
            return tonumber(cleanNumber) or 0
        end
        
        return 0
    end)
    
    return success and money or 0
end

-- CHI DETECTION SYSTEM
local function checkNotEnoughChi()
    local success, result = pcall(function()
        local topNotification = LocalPlayer.PlayerGui:FindFirstChild("Top_Notification")
        if not topNotification then return false end
        
        local frame = topNotification:FindFirstChild("Frame")
        if not frame then return false end
        
        local notificationUI = frame:FindFirstChild("Notification_UI")
        if not notificationUI then return false end
        
        local textLabel = notificationUI:FindFirstChild("TextLabel")
        if not textLabel then return false end
        
        -- Check if the text contains "Not enough Chi"
        local text = textLabel.Text
        if string.find(text:lower(), "not enough chi") then
            return true
        end
        
        return false
    end)
    
    if success then
        return result
    else
        return false
    end
end

-- Monitor Chi notifications
local function startChiMonitoring()
    spawn(function()
        while chiDetectionEnabled do
            if checkNotEnoughChi() then
                -- Stop all Zen purchasing if "Not enough Chi" is detected
                if autoBuyingSelectedZen then
                    autoBuyingSelectedZen = false
                    lib:Notification('Warning', 'Not enough Chi detected! Stopped Zen purchasing.', 5)
                end
                
                -- Wait longer before checking again
                task.wait(10)
            else
                task.wait(1) -- Check every second
            end
        end
    end)
end

-- Start Chi monitoring
startChiMonitoring()

-- ENHANCED STOCK AND COST DETECTION FUNCTIONS
local function getSeedStockAndCost(seedName)
    local success, result = pcall(function()
        local seedShop = LocalPlayer.PlayerGui:FindFirstChild("Seed_Shop")
        if not seedShop then return {stock = 0, cost = 0, hasStock = false} end
        
        local frame = seedShop:FindFirstChild("Frame")
        if not frame then return {stock = 0, cost = 0, hasStock = false} end
        
        local scrollingFrame = frame:FindFirstChild("ScrollingFrame")
        if not scrollingFrame then return {stock = 0, cost = 0, hasStock = false} end
        
        local seedFrame = scrollingFrame:FindFirstChild(seedName)
        if not seedFrame then return {stock = 0, cost = 0, hasStock = false} end
        
        local mainFrame = seedFrame:FindFirstChild("Main_Frame")
        if not mainFrame then return {stock = 0, cost = 0, hasStock = false} end
        
        -- Get stock
        local stockText = mainFrame:FindFirstChild("Stock_Text")
        local stock = 0
        if stockText then
            local stockNumber = string.match(stockText.Text, "X(%d+)")
            stock = tonumber(stockNumber) or 0
        end
        
        -- Get cost
        local costText = mainFrame:FindFirstChild("Cost_Text")
        local cost = 0
        local hasStock = false
        if costText then
            local costString = costText.Text
            if string.find(costString:upper(), "NO STOCK") then
                hasStock = false
                cost = 0
            else
                hasStock = true
                -- Parse cost (format: "15,000,000¢")
                local costNumber = string.match(costString, "([%d,]+)")
                if costNumber then
                    local cleanNumber = string.gsub(costNumber, ",", "")
                    cost = tonumber(cleanNumber) or 0
                end
            end
        end
        
        return {stock = stock, cost = cost, hasStock = hasStock}
    end)
    
    return success and result or {stock = 0, cost = 0, hasStock = false}
end

local function getGearStockAndCost(gearName)
    local success, result = pcall(function()
        local gearShop = LocalPlayer.PlayerGui:FindFirstChild("Gear_Shop")
        if not gearShop then return {stock = 0, cost = 0, hasStock = false} end
        
        local frame = gearShop:FindFirstChild("Frame")
        if not frame then return {stock = 0, cost = 0, hasStock = false} end
        
        local scrollingFrame = frame:FindFirstChild("ScrollingFrame")
        if not scrollingFrame then return {stock = 0, cost = 0, hasStock = false} end
        
        local gearFrame = scrollingFrame:FindFirstChild(gearName)
        if not gearFrame then return {stock = 0, cost = 0, hasStock = false} end
        
        local mainFrame = gearFrame:FindFirstChild("Main_Frame")
        if not mainFrame then return {stock = 0, cost = 0, hasStock = false} end
        
        -- Get stock
        local stockText = mainFrame:FindFirstChild("Stock_Text")
        local stock = 0
        if stockText then
            local stockNumber = string.match(stockText.Text, "X(%d+)")
            stock = tonumber(stockNumber) or 0
        end
        
        -- Get cost
        local costText = mainFrame:FindFirstChild("Cost_Text")
        local cost = 0
        local hasStock = false
        if costText then
            local costString = costText.Text
            if string.find(costString:upper(), "NO STOCK") then
                hasStock = false
                cost = 0
            else
                hasStock = true
                -- Parse cost (format: "15,000,000¢")
                local costNumber = string.match(costString, "([%d,]+)")
                if costNumber then
                    local cleanNumber = string.gsub(costNumber, ",", "")
                    cost = tonumber(cleanNumber) or 0
                end
            end
        end
        
        return {stock = stock, cost = cost, hasStock = hasStock}
    end)
    
    return success and result or {stock = 0, cost = 0, hasStock = false}
end

-- IMPROVED: Zen Shop Stock Detection Function (Chi-based, no money check needed)
local function getZenStock(zenItemName)
    local success, stock = pcall(function()
        local zenShop = LocalPlayer.PlayerGui:FindFirstChild("EventShop_UI")
        if not zenShop then return 0 end
        
        local frame = zenShop:FindFirstChild("Frame")
        if not frame then return 0 end
        
        local scrollingFrame = frame:FindFirstChild("ScrollingFrame")
        if not scrollingFrame then return 0 end
        
        local zenFrame = scrollingFrame:FindFirstChild(zenItemName)
        if not zenFrame then return 0 end
        
        local mainFrame = zenFrame:FindFirstChild("Main_Frame")
        if not mainFrame then return 0 end
        
        local stockText = mainFrame:FindFirstChild("Stock_Text")
        if not stockText then return 0 end
        
        -- Parse stock text (format: "X15 Stock" or "X0 Stock")
        local stockNumber = string.match(stockText.Text, "X(%d+)")
        local stockValue = tonumber(stockNumber) or 0
        
        return stockValue
    end)
    
    return success and stock or 0
end

-- NEW: Zen Shop Restock Function
local function restockZenShop()
    local success = pcall(function()
        restockZenEvent:FireServer()
    end)
    return success
end

-- ENHANCED: Buy ALL STOCK Functions with Money Verification
local function buyAllSeedStock(seedList)
    local totalPurchased = 0
    local itemsWithStockAndMoney = {}
    local playerMoney = getPlayerMoney()
    
    -- First check which items have stock, cost info, and sufficient money
    for _, seedName in ipairs(seedList) do
        local info = getSeedStockAndCost(seedName)
        if info.hasStock and info.stock > 0 and info.cost > 0 and playerMoney >= info.cost then
            table.insert(itemsWithStockAndMoney, {
                name = seedName, 
                stock = info.stock, 
                cost = info.cost
            })
        end
    end
    
    -- Only proceed if there are items with stock and sufficient money
    if #itemsWithStockAndMoney == 0 then
        return 0 -- No valid items available
    end
    
    -- Buy all stock for items that meet criteria
    for _, item in ipairs(itemsWithStockAndMoney) do
        for i = 1, item.stock do
            -- Check money before each purchase
            local currentMoney = getPlayerMoney()
            if currentMoney < item.cost then
                lib:Notification('Warning', 'Insufficient money for ' .. item.name .. '! Need: ' .. item.cost .. '¢', 5)
                break
            end
            
            if buyEvent then
                local success = pcall(function()
                    buyEvent:FireServer(item.name)
                    totalPurchased = totalPurchased + 1
                end)
                if not success then
                    break -- Stop if purchase fails
                end
            end
        end
    end
    
    return totalPurchased
end

local function buyAllGearStock(gearList)
    local totalPurchased = 0
    local itemsWithStockAndMoney = {}
    local playerMoney = getPlayerMoney()
    
    -- First check which items have stock, cost info, and sufficient money
    for _, gearName in ipairs(gearList) do
        local info = getGearStockAndCost(gearName)
        if info.hasStock and info.stock > 0 and info.cost > 0 and playerMoney >= info.cost then
            table.insert(itemsWithStockAndMoney, {
                name = gearName, 
                stock = info.stock, 
                cost = info.cost
            })
        end
    end
    
    -- Only proceed if there are items with stock and sufficient money
    if #itemsWithStockAndMoney == 0 then
        return 0 -- No valid items available
    end
    
    -- Buy all stock for items that meet criteria
    for _, item in ipairs(itemsWithStockAndMoney) do
        for i = 1, item.stock do
            -- Check money before each purchase
            local currentMoney = getPlayerMoney()
            if currentMoney < item.cost then
                lib:Notification('Warning', 'Insufficient money for ' .. item.name .. '! Need: ' .. item.cost .. '¢', 5)
                break
            end
            
            if buyGearEvent then
                local success = pcall(function()
                    buyGearEvent:FireServer(item.name)
                    totalPurchased = totalPurchased + 1
                end)
                if not success then
                    break -- Stop if purchase fails
                end
            end
        end
    end
    
    return totalPurchased
end

-- IMPROVED: Zen Shop Buy ALL STOCK Function with Chi Detection and T Detection
local function buyAllZenStock(zenList)
    local totalPurchased = 0
    local itemsWithStock = {}
    
    -- Check for Chi before starting
    if checkNotEnoughChi() then
        return 0
    end
    
    -- NEW: Check T threshold before starting
    if isAtTThreshold() then
        lib:Notification('Warning', 'T threshold reached! Stopping Zen purchases.', 5)
        return 0
    end
    
    -- First check which items have stock
    for _, zenItemName in ipairs(zenList) do
        local stock = getZenStock(zenItemName)
        if stock > 0 then
            table.insert(itemsWithStock, {name = zenItemName, stock = stock})
        end
    end
    
    -- Only proceed if there are items with stock
    if #itemsWithStock == 0 then
        -- Try to restock if no stock available
        restockZenShop()
        task.wait(1) -- Wait for restock to process
        return 0 -- No stock available, don't waste resources
    end
    
    -- Buy all stock for items that have it
    for _, item in ipairs(itemsWithStock) do
        for i = 1, item.stock do
            -- Check Chi before each purchase
            if checkNotEnoughChi() then
                return totalPurchased
            end
            
            -- NEW: Check T threshold before each purchase
            if isAtTThreshold() then
                lib:Notification('Warning', 'T threshold reached during purchase! Stopping.', 5)
                return totalPurchased
            end
            
            local success = pcall(function()
                buyZenEvent:FireServer(item.name)
                totalPurchased = totalPurchased + 1
            end)
            
            if not success then
                break -- Stop if purchase fails
            end
        end
    end
    
    return totalPurchased
end

-- Helper Functions using GetFarm module
local function getPlayerFarm()
    local success, result = pcall(function()
        local get_farm = require(ReplicatedStorage.Modules.GetFarm)
        return get_farm(LocalPlayer)
    end)
    
    if success and result then
        return result
    else
        return nil
    end
end

-- NEW: Tranquil Detection Function
local function hasTranquilInBackpack()
    local backpack = LocalPlayer:FindFirstChild("Backpack")
    if not backpack then return false end
    
    for _, tool in pairs(backpack:GetChildren()) do
        if tool:IsA("Tool") then
            -- Check if the tool name contains "Tranquil"
            -- Format examples: "[Windstruck, Tranquil] Mango [20.09kg]"
            if string.find(tool.Name, "Tranquil") then
                return true, tool.Name
            end
        end
    end
    
    return false, nil
end

-- NPC Submission Functions with Tranquil Detection
local function submitToNPC(npcName)
    -- Check if player has Tranquil mutasi in backpack
    local hasTranquil, tranquilItemName = hasTranquilInBackpack()
    
    if not hasTranquil then
        lib:Notification('Warning', 'No Tranquil mutasi found in backpack! Cannot submit to NPC.', 5)
        return false
    end
        
    if npcName == "Channeller" then
        if ZenQuestRemoteEvent then
            ZenQuestRemoteEvent:FireServer("SubmitAllPlants")
            return true
        end
    elseif npcName == "Zen Shop" then
        if ZenAuraRemoteEvent then
            ZenAuraRemoteEvent:FireServer("SubmitAllPlants")
            return true
        end
    end
    return false
end

local function autoSubmitToNPCLoop()
    while autoSubmitToNPC do
        if selectedNPC then
            local hasTranquil, tranquilItemName = hasTranquilInBackpack()
            
            if hasTranquil then
                local success = submitToNPC(selectedNPC)
                if success then
                end
            else
                -- Wait longer if no Tranquil is found
                task.wait(5)
            end
        end
        task.wait(0.1)
    end
end

local function getFruitCount()
    local bag = LocalPlayer.Backpack
    local count = 0
    for _, v in pairs(bag:GetChildren()) do
        if v:FindFirstChild("Weight") and v:FindFirstChild("Variant") then
            count = count + 1
        end
    end
    return count
end

local function removeHighlight()
    if currentHighlight then
        currentHighlight:Destroy()
        currentHighlight = nil
    end
    if currentBillboard then
        currentBillboard:Destroy()
        currentBillboard = nil
    end
end

local function highlightBiggestFruit()
    local farm = getPlayerFarm()
    if not farm then
        removeHighlight()
        lastBiggest = nil
        return
    end

    local plants = farm:FindFirstChild("Important") and farm.Important:FindFirstChild("Plants_Physical")
    if not plants then
        removeHighlight()
        lastBiggest = nil
        return
    end

    local biggest, maxWeight = nil, -math.huge
    for _, fruit in ipairs(plants:GetChildren()) do
        local weightObj = fruit:FindFirstChild("Weight")
        if weightObj and tonumber(weightObj.Value) and tonumber(weightObj.Value) > maxWeight then
            biggest = fruit
            maxWeight = tonumber(weightObj.Value)
        end
    end

    if biggest ~= lastBiggest then
        removeHighlight()
        lastBiggest = biggest
        if biggest and biggest:IsA("Model") then
            local highlight = Instance.new("Highlight")
            highlight.FillColor = Color3.fromRGB(0, 255, 0)
            highlight.OutlineColor = Color3.fromRGB(0, 150, 0)
            highlight.FillTransparency = 0.3
            highlight.OutlineTransparency = 0
            highlight.Adornee = biggest
            highlight.Parent = biggest
            currentHighlight = highlight

            local head = biggest:FindFirstChildWhichIsA("BasePart")
            if head then
                local bb = Instance.new("BillboardGui")
                bb.Size = UDim2.new(0, 100, 0, 40)
                bb.AlwaysOnTop = true
                bb.StudsOffset = Vector3.new(0, 3, 0)
                bb.Adornee = head
                bb.Parent = head

                local label = Instance.new("TextLabel")
                label.Size = UDim2.new(1, 0, 1, 0)
                label.BackgroundTransparency = 1
                label.TextColor3 = Color3.fromRGB(0, 255, 0)
                label.TextStrokeTransparency = 0.2
                label.TextStrokeColor3 = Color3.fromRGB(0, 0, 0)
                label.TextScaled = true
                label.Font = Enum.Font.FredokaOne
                label.Text = "Weight: " .. string.format("%.2f", maxWeight) .. "kg"
                label.Parent = bb

                currentBillboard = bb
            end
        end
    end
end

local function savePosition()
    local char = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
    local hrp = char:FindFirstChild("HumanoidRootPart")
    if hrp then
        savedPosition = hrp.Position
        lib:Notification('Success', 'Position saved!', 3)
    else
        lib:Notification('Error', 'Could not save position (HumanoidRootPart missing).', 3)
    end
end

local function teleportTo(pos)
    local char = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
    local hrp = char:FindFirstChild("HumanoidRootPart")
    if not hrp then
        lib:Notification('Error', 'Could not teleport (HumanoidRootPart missing).', 3)
        return
    end
    if typeof(pos) == "Vector3" then
        hrp.CFrame = CFrame.new(pos)
    elseif typeof(pos) == "string" then
        local x, y, z = string.match(pos, "Vector3%s*%(([^,]+),%s*([^,]+),%s*([^)]+)%)")
        if x and y and z then
            hrp.CFrame = CFrame.new(tonumber(x), tonumber(y), tonumber(z))
        end
    end
end

local function sellInventory()
    ReplicatedStorage:WaitForChild("GameEvents"):WaitForChild("Sell_Inventory"):FireServer()
    lib:Notification('Success', 'Inventory sold!', 3)
end

local function tpAndSell()
    local char = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
    local hrp = char:FindFirstChild("HumanoidRootPart")
    if hrp then
        hrp.CFrame = CFrame.new(
            86.5854721, 2.76619363, 0.426784277,
            0, 0, -1,
            0, 1, 0,
            1, 0, 0
        )
        task.wait(0.2)
        ReplicatedStorage:WaitForChild("GameEvents"):WaitForChild("Sell_Inventory"):FireServer()
        lib:Notification('Success', 'Teleported and sold inventory!', 3)
    else
        lib:Notification('Error', 'HumanoidRootPart not found!', 3)
    end
end

-- FIXED: Mutasi collection filter function based on attributes
local function mutasiCollectFilter(item, selectedMutasi)
    -- Check if item exists and has attributes
    if not item then return false end
    
    -- If no specific mutasi selected, collect all items with any mutasi
    if #selectedMutasi == 0 then
        -- Check if item has any mutasi attribute set to true
        for _, mutasi in pairs(validMutasi) do
            local attributeValue = item:GetAttribute(mutasi)
            if attributeValue == true then
                return true
            end
        end
        return false
    end
    
    -- If specific mutasi selected, check if item has any of the selected ones
    for _, mutasi in pairs(selectedMutasi) do
        local attributeValue = item:GetAttribute(mutasi)
        if attributeValue == true then
            return true
        end
    end
    
    return false
end

-- ENHANCED SEED BUYING SECTION with Money Detection
sections.SeedBuyer:AddDropdown("SeedSelect", {
    Title = "Select Seeds to Buy",
    Description = "Choose which seeds you want to auto buy",
    Options = validSeeds,
    Default = {},
    PlaceHolder = "Select seeds",
    Multiple = true,
    Callback = function(selected)
        selectedSeeds = selected
    end
})

sections.SeedBuyer:AddToggle("AutoBuySelected", {
    Title = "Auto Buy Selected Seeds",
    Default = false,
    Description = "Buy all available stock when both money and stock are sufficient",
    Callback = function(value)
        autoBuyingSelected = value
        if value then
            if #selectedSeeds > 0 then
                lib:Notification('Success', 'Auto buying seeds enabled! Checking money & stock', 3)
                task.spawn(function()
                    while autoBuyingSelected do
                        local purchased = buyAllSeedStock(selectedSeeds)
                        if purchased == 0 then
                            -- No valid purchases (no stock, no money, or no cost info), wait longer
                            task.wait(10)
                        else
                            -- Purchases were made, wait shorter time
                            task.wait(3)
                        end
                    end
                end)
            else
                lib:Notification('Warning', 'No seeds selected! Please select seeds from dropdown first.', 3)
                autoBuyingSelected = false
            end
        else
            lib:Notification('Info', 'Auto buying seeds disabled!', 3)
        end
    end,
})

-- ENHANCED GEAR BUYING SECTION with Money Detection
sections.GearBuyer:AddDropdown("GearSelect", {
    Title = "Select Gears to Buy",
    Description = "Choose which gears you want to auto buy",
    Options = validGears,
    Default = {},
    PlaceHolder = "Select gears",
    Multiple = true,
    Callback = function(selected)
        selectedGears = selected
    end
})

sections.GearBuyer:AddToggle("AutoBuySelectedGear", {
    Title = "Auto Buy Selected Gears",
    Default = false,
    Description = "Buy all available stock when both money and stock are sufficient",
    Callback = function(value)
        autoBuyingSelectedGear = value
        if value then
            if #selectedGears > 0 then
                lib:Notification('Success', 'Auto buying gears enabled! Checking money & stock', 3)
                task.spawn(function()
                    while autoBuyingSelectedGear do
                        local purchased = buyAllGearStock(selectedGears)
                        if purchased == 0 then
                            -- No valid purchases (no stock, no money, or no cost info), wait longer
                            task.wait(10)
                        else
                            -- Purchases were made, wait shorter time
                            task.wait(3)
                        end
                    end
                end)
            else
                lib:Notification('Warning', 'No gears selected! Please select gears from dropdown first.', 3)
                autoBuyingSelectedGear = false
            end
        else
            lib:Notification('Info', 'Auto buying gears disabled!', 3)
        end
    end,
})

-- ENHANCED ZEN SHOP SECTION with Chi Detection and T Detection
sections.ZenShop:AddDropdown("ZenSelect", {
    Title = "Select Zen Items to Buy",
    Description = "Choose which Zen items you want to auto buy (Chi-based)",
    Options = validZenShop,
    Default = {},
    PlaceHolder = "Select Zen items",
    Multiple = true,
    Callback = function(selected)
        selectedZenItems = selected
    end
})

-- NEW: T-Value Threshold TextBox
sections.ZenShop:AddTextbox({
    Title = "Restocking stop",
    Description = "Enter T value to stop purchasing (e.g., 1.5 for 1.5T)",
    PlaceHolder = "1.0",
    Numeric = true,
    Finished = true,
    Default = "1.0",
    Callback = function(text)
        local value = tonumber(text)
        if value and value > 0 then
            stopAtTValue = value
            lib:Notification('Success', 'T threshold set to: ' .. value .. 'T', 3)
        else
            lib:Notification('Warning', 'Invalid T value! Please enter a positive number.', 3)
        end
    end
})

-- NEW: T Detection Toggle
sections.ZenShop:AddToggle("TDetection", {
    Title = "Auto Restock",
    Default = false,
    Description = "Stop purchasing when restock cost reaches specified T value",
    Callback = function(value)
        tDetectionEnabled = value
        if value then
            lib:Notification('Success', 'T detection enabled! Will stop at ' .. stopAtTValue .. 'T', 3)
            restockZenShop()
        else
            lib:Notification('Info', 'T detection disabled!', 3)
        end
    end,
})

sections.ZenShop:AddToggle("AutoBuySelectedZen", {
    Title = "Auto Buy Selected Zen Items (Chi Check)",
    Default = false,
    Description = "Auto buy ALL available stock - Stops when not enough Chi",
    Callback = function(value)
        autoBuyingSelectedZen = value
        if value then
            if #selectedZenItems > 0 then
                lib:Notification('Success', 'Auto buying Zen items enabled! Checking Chi & stock', 3)
                task.spawn(function()
                    while autoBuyingSelectedZen do
                        -- Check Chi before starting purchase cycle
                        if checkNotEnoughChi() then
                            lib:Notification('Warning', 'Not enough Chi detected! Stopping Zen purchases.', 5)
                            autoBuyingSelectedZen = false
                            break
                        end
                        
                        local purchased = buyAllZenStock(selectedZenItems)
                        if purchased == 0 then
                            -- No stock available or not enough Chi, wait longer
                            task.wait(10)
                        else
                            -- Stock was available and purchased, wait shorter time
                            task.wait(3)
                        end
                    end
                end)
            else
                lib:Notification('Warning', 'No Zen items selected! Please select Zen items from dropdown first.', 3)
                autoBuyingSelectedZen = false
            end
        else
            lib:Notification('Info', 'Auto buying Zen items disabled!', 3)
        end
    end,
})

-- Teleport Section
sections.Teleport:AddButton({
    Title = "Save Position",
    Callback = savePosition
})

sections.Teleport:AddButton({
    Title = "Teleport to Saved Position",
    Callback = function()
        if savedPosition then
            teleportTo(savedPosition)
            lib:Notification('Success', 'Teleported to saved position!', 3)
        else
            lib:Notification('Warning', 'No position saved yet.', 3)
        end
    end
})

-- Fruit Management Section
sections.Fruit:AddSlider("FruitThreshold", {
    Title = "Fruit Threshold",
    Description = "Number of fruits before auto-selling",
    Default = 10,
    Min = 1,
    Max = 200,
    Increment = 1,
    Callback = function(value)
        fruitThreshold = value
    end,
})

sections.Fruit:AddToggle("AutoSell", {
    Title = "Auto Sell",
    Default = false,
    Description = "Automatically teleport and sell when threshold reached",
    Callback = function(state)
        autoSell = state
        if autoSell then
            lib:Notification('Success', 'Auto TP & Sell enabled.', 3)
            task.spawn(function()
                while autoSell do
                    if getFruitCount() >= fruitThreshold then
                        tpAndSell()
                        task.wait(2)
                    end
                    task.wait(1)
                end
            end)
        else
            lib:Notification('Info', 'Auto TP & Sell disabled.', 3)
        end
    end,
})

sections.Fruit:AddToggle("ShowBiggest", {
    Title = "Show Biggest Fruit",
    Default = false,
    Description = "Highlight the biggest fruit in your farm",
    Callback = function(state)
        highlightToggle = state
        if highlightToggle then
            highlightBiggestFruit()
            conn = RunService.RenderStepped:Connect(function()
                if highlightToggle then
                    highlightBiggestFruit()
                end
            end)
        else
            if conn then conn:Disconnect() end
            removeHighlight()
            lastBiggest = nil
        end
    end,
})

sections.Fruit:AddButton({
    Title = "Sell Inventory",
    Callback = sellInventory
})

sections.Fruit:AddButton({
    Title = "TP, Sell, Return",
    Callback = function()
        savePosition()
        local char = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
        local hrp = char:FindFirstChild("HumanoidRootPart")
        if not hrp then return end
        hrp.CFrame = CFrame.new(86.57965850830078, 2.999999761581421, 0.4267919063568115)
        task.wait(0.25)
        sellInventory()
        task.wait(0.2)
        if savedPosition then
            teleportTo(savedPosition)
            lib:Notification('Success', 'Returned to saved position!', 3)
        end
    end
})

-- FIXED: Mutasi Collection Section
sections.AutoHarvest:AddDropdown("MutasiSelect", {
    Title = "Select Mutasi to Collect",
    Description = "Choose which mutasi you want to collect (leave empty for all mutasi)",
    Options = validMutasi,
    Default = {},
    PlaceHolder = "Select mutasi (optional)",
    Multiple = true,
    Callback = function(selected)
        selectedMutasi = selected
        if #selectedMutasi > 0 then
            local mutasiList = table.concat(selectedMutasi, ", ")
            lib:Notification('Info', 'Selected mutasi: ' .. mutasiList, 5)
        else
            lib:Notification('Info', 'No mutasi selected - will collect all mutasi fruits', 3)
        end
    end
})

sections.AutoHarvest:AddToggle("MutasiAutoCollect", {
    Title = "Auto Collect Mutasi",
    Default = false,
    Description = "Automatically collect fruits with selected mutasi based on attributes",
    Callback = function(state)
        mutasiCollectEnabled = state
        if mutasiCollectEnabled then
            lib:Notification('Success', 'Auto Collect Mutasi enabled!', 3)
            task.spawn(function()
                while mutasiCollectEnabled do
                    local players = game:GetService("Players")
                    local replicated_storage = game:GetService("ReplicatedStorage")
                    local get_farm = require(replicated_storage.Modules.GetFarm)
                    local byte_net_reliable = replicated_storage:WaitForChild("ByteNetReliable")
                    local buffer = buffer.fromstring("\1\1\0\1")

                    local local_player = players.LocalPlayer
                    local farm = get_farm(local_player)
                    if not farm or not farm.Important or not farm.Important:FindFirstChild("Plants_Physical") then
                        lib:Notification('Warning', 'Could not find your farm plants.', 3)
                        break
                    end

                    local collectedCount = 0
                    for _, plant in next, farm.Important.Plants_Physical:GetChildren() do
                        -- Check plant itself for mutasi attributes
                        if mutasiCollectFilter(plant, selectedMutasi) then
                            pcall(function()
                                byte_net_reliable:FireServer(buffer, { plant })
                                collectedCount = collectedCount + 1
                            end)
                        end
                        
                        -- Check fruits inside plant for mutasi attributes
                        if plant:FindFirstChild("Fruits") then
                            for _, fruit in pairs(plant.Fruits:GetChildren()) do
                                if mutasiCollectFilter(fruit, selectedMutasi) then
                                    pcall(function()
                                        byte_net_reliable:FireServer(buffer, { fruit })
                                        collectedCount = collectedCount + 1
                                    end)
                                end
                            end
                        end
                    end
                    
                    task.wait(3)
                end
                lib:Notification('Info', 'Auto Collect Mutasi disabled!', 3)
            end)
        else
            lib:Notification('Info', 'Auto Collect Mutasi disabled!', 3)
        end
    end,
})

-- ENHANCED NPC Submission Section with Tranquil Detection
sections.NPCSubmission:AddButton({
    Title = "Check Tranquil in Backpack",
    Description = "Check if you have any Tranquil mutasi items in backpack",
    Callback = function()
        local hasTranquil, tranquilItemName = hasTranquilInBackpack()
        
        if hasTranquil then
            lib:Notification('Success', 'Tranquil found: ' .. tranquilItemName, 5)
        else
            lib:Notification('Warning', 'No Tranquil mutasi found in backpack!', 5)
        end
    end,
})

sections.NPCSubmission:AddDropdown("NPCSelect", {
    Title = "Select Give to NPC",
    Description = "Choose which NPC to submit plants to (requires Tranquil mutasi)",
    Options = {"Channeller", "Zen Shop"},
    Default = "",
    PlaceHolder = "Select NPC",
    Multiple = false,
    Callback = function(selected)
        if type(selected) == "table" and #selected > 0 then
            selectedNPC = selected[1]
        elseif type(selected) == "string" then
            selectedNPC = selected
        else
            selectedNPC = nil
        end
        
        if selectedNPC then
            lib:Notification('Info', 'Selected NPC: ' .. selectedNPC, 3)
        else
            lib:Notification('Info', 'No NPC selected', 3)
        end
    end
})

sections.NPCSubmission:AddToggle("AutoSubmitNPC", {
    Title = "Auto Submit to NPC (Tranquil Required)",
    Default = false,
    Description = "Automatically submit plants to selected NPC when Tranquil mutasi is detected",
    Callback = function(value)
        autoSubmitToNPC = value
        if value then
            if selectedNPC then
                task.spawn(autoSubmitToNPCLoop)
            else
                lib:Notification('Warning', 'Please select an NPC first!', 3)
                autoSubmitToNPC = false
            end
        else
            lib:Notification('Info', 'Auto submit to NPC disabled!', 3)
        end
    end,
})

-- Config System
FlagsManager:SetLibrary(lib)
FlagsManager:SetIgnoreIndexes({})
FlagsManager:SetFolder("Avantrix/GAG")
FlagsManager:InitSaveSystem(tabs.Settings)
