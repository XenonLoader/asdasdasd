--[[
    ESP System for workspace.NaturalPickups
    Structure: workspace.NaturalPickups -> Folder -> Model
    ESP Name: Uses Model name directly
]]

--Settings--
local ESP = {
    -- Core Settings
    Enabled = false,
    AutoRemove = true,
    
    -- Visual Settings
    Boxes = true,
    BoxShift = CFrame.new(0, -1.5, 0),
    BoxSize = Vector3.new(4, 6, 0),
    Color = Color3.fromRGB(255, 170, 0),
    FaceCamera = false,
    Thickness = 2,
    
    -- Text Settings
    Names = true,
    Distance = true,
    Health = false,
    TextSize = 16,
    TextOutline = true,
    
    -- NaturalPickups Specific
    ShowFolderName = false, -- Show folder name in ESP
    ShowModelOnly = true,   -- Only show model name
    
    -- Performance Settings
    MaxDistance = 1000,
    UpdateRate = 60,
    
    -- Storage
    Objects = setmetatable({}, {__mode="kv"}),
    Overrides = {},
    
    -- Highlight System
    Highlighted = nil,
    HighlightColor = Color3.fromRGB(255, 0, 0),
}

--Declarations--
local cam = workspace.CurrentCamera
local plrs = game:GetService("Players")
local plr = plrs.LocalPlayer
local runService = game:GetService("RunService")

local V3new = Vector3.new
local V2new = Vector2.new
local WorldToViewportPoint = cam.WorldToViewportPoint
local floor = math.floor

--Utility Functions--
local function Draw(obj, props)
    local new = Drawing.new(obj)
    props = props or {}
    for i, v in pairs(props) do
        new[i] = v
    end
    return new
end

local function GetDistance(pos1, pos2)
    return (pos1 - pos2).Magnitude
end

-- NaturalPickups Specific Functions
local function ScanNaturalPickups()
    local naturalPickups = workspace:FindFirstChild("NaturalPickups")
    if not naturalPickups then
        warn("NaturalPickups not found in workspace!")
        return {}
    end
    
    local foundObjects = {}
    
    -- Scan each folder in NaturalPickups
    for _, folder in pairs(naturalPickups:GetChildren()) do
        if folder:IsA("Folder") then
            -- Look for models in this folder
            for _, model in pairs(folder:GetChildren()) do
                if model:IsA("Model") then
                    table.insert(foundObjects, {
                        Object = model,
                        FolderName = folder.Name,
                        ModelName = model.Name,
                        FullPath = "NaturalPickups." .. folder.Name .. "." .. model.Name
                    })
                end
            end
        end
    end
    
    return foundObjects
end

--ESP Core Functions--
function ESP:Toggle(bool)
    self.Enabled = bool
    if not bool then
        for i, v in pairs(self.Objects) do
            if v.Type == "Box" then
                if v.Temporary then
                    v:Remove()
                else
                    for _, component in pairs(v.Components) do
                        component.Visible = false
                    end
                end
            end
        end
    end
end

function ESP:GetBox(obj)
    return self.Objects[obj]
end

function ESP:SetHighlight(obj, color)
    self.Highlighted = obj
    self.HighlightColor = color or Color3.fromRGB(255, 0, 0)
end

function ESP:ClearHighlight()
    self.Highlighted = nil
end

-- NaturalPickups Object Listener
function ESP:AddNaturalPickupsListener(options)
    options = options or {}
    
    local function ProcessModel(modelData)
        local model = modelData.Object
        local folderName = modelData.FolderName
        local modelName = modelData.ModelName
        
        if not options.Validator or options.Validator(model, folderName, modelName) then
            local displayName
            if ESP.ShowFolderName then
                displayName = folderName .. " - " .. modelName
            else
                displayName = modelName
            end
            
            local box = ESP:Add(model, {
                PrimaryPart = model.PrimaryPart or model:FindFirstChildWhichIsA("BasePart"),
                Color = type(options.Color) == "function" and options.Color(model, folderName, modelName) or options.Color,
                ColorDynamic = options.ColorDynamic,
                Name = type(options.CustomName) == "function" and options.CustomName(model, folderName, modelName) or displayName,
                IsEnabled = options.IsEnabled,
                RenderInNil = options.RenderInNil,
                Size = options.Size,
                Temporary = options.Temporary
            })
            
            if options.OnAdded then
                coroutine.wrap(options.OnAdded)(box, modelData)
            end
        end
    end
    
    -- Initial scan
    local function InitialScan()
        local allModels = ScanNaturalPickups()
        for _, modelData in pairs(allModels) do
            ProcessModel(modelData)
        end
    end
    
    InitialScan()
    
    -- Listen for new objects in NaturalPickups
    local naturalPickups = workspace:FindFirstChild("NaturalPickups")
    if naturalPickups then
        -- Listen for new folders
        naturalPickups.ChildAdded:Connect(function(folder)
            if folder:IsA("Folder") then
                task.wait(0.1) -- Wait for folder to populate
                
                -- Listen for models in this new folder
                folder.ChildAdded:Connect(function(model)
                    if model:IsA("Model") then
                        ProcessModel({
                            Object = model,
                            FolderName = folder.Name,
                            ModelName = model.Name,
                            FullPath = "NaturalPickups." .. folder.Name .. "." .. model.Name
                        })
                    end
                end)
                
                -- Process existing models in new folder
                for _, model in pairs(folder:GetChildren()) do
                    if model:IsA("Model") then
                        ProcessModel({
                            Object = model,
                            FolderName = folder.Name,
                            ModelName = model.Name,
                            FullPath = "NaturalPickups." .. folder.Name .. "." .. model.Name
                        })
                    end
                end
            end
        end)
        
        -- Listen for models added to existing folders
        for _, folder in pairs(naturalPickups:GetChildren()) do
            if folder:IsA("Folder") then
                folder.ChildAdded:Connect(function(model)
                    if model:IsA("Model") then
                        ProcessModel({
                            Object = model,
                            FolderName = folder.Name,
                            ModelName = model.Name,
                            FullPath = "NaturalPickups." .. folder.Name .. "." .. model.Name
                        })
                    end
                end)
            end
        end
    end
end

--Box Class--
local boxBase = {}
boxBase.__index = boxBase

function boxBase:Remove()
    ESP.Objects[self.Object] = nil
    for i, v in pairs(self.Components) do
        v.Visible = false
        v:Remove()
        self.Components[i] = nil
    end
end

function boxBase:SetColor(color)
    self.Color = color
end

function boxBase:SetName(name)
    self.Name = name
end

function boxBase:Update()
    if not self.PrimaryPart then
        return self:Remove()
    end

    local color = self.Color or ESP.Color
    
    -- Highlight override
    if ESP.Highlighted == self.Object then
        color = ESP.HighlightColor
    end

    -- Check if should render
    local allow = true
    
    -- Distance check
    local distance = GetDistance(cam.CFrame.Position, self.PrimaryPart.Position)
    if distance > ESP.MaxDistance then
        allow = false
    end
    
    -- Enabled check
    if self.IsEnabled and (type(self.IsEnabled) == "string" and not ESP[self.IsEnabled] or 
                          type(self.IsEnabled) == "function" and not self:IsEnabled()) then
        allow = false
    end
    
    -- Parent check
    if not workspace:IsAncestorOf(self.PrimaryPart) and not self.RenderInNil then
        allow = false
    end

    if not allow then
        for i, v in pairs(self.Components) do
            v.Visible = false
        end
        return
    end

    -- Calculations
    local cf = self.PrimaryPart.CFrame
    if ESP.FaceCamera then
        cf = CFrame.new(cf.Position, cam.CFrame.Position)
    end
    
    local size = self.Size
    local locs = {
        TopLeft = cf * ESP.BoxShift * CFrame.new(size.X/2, size.Y/2, 0),
        TopRight = cf * ESP.BoxShift * CFrame.new(-size.X/2, size.Y/2, 0),
        BottomLeft = cf * ESP.BoxShift * CFrame.new(size.X/2, -size.Y/2, 0),
        BottomRight = cf * ESP.BoxShift * CFrame.new(-size.X/2, -size.Y/2, 0),
        TagPos = cf * ESP.BoxShift * CFrame.new(0, size.Y/2, 0),
        Torso = cf * ESP.BoxShift
    }

    -- Box rendering
    if ESP.Boxes then
        local TopLeft, Vis1 = WorldToViewportPoint(cam, locs.TopLeft.Position)
        local TopRight, Vis2 = WorldToViewportPoint(cam, locs.TopRight.Position)
        local BottomLeft, Vis3 = WorldToViewportPoint(cam, locs.BottomLeft.Position)
        local BottomRight, Vis4 = WorldToViewportPoint(cam, locs.BottomRight.Position)

        if self.Components.Quad then
            if Vis1 or Vis2 or Vis3 or Vis4 then
                self.Components.Quad.Visible = true
                self.Components.Quad.PointA = V2new(TopRight.X, TopRight.Y)
                self.Components.Quad.PointB = V2new(TopLeft.X, TopLeft.Y)
                self.Components.Quad.PointC = V2new(BottomLeft.X, BottomLeft.Y)
                self.Components.Quad.PointD = V2new(BottomRight.X, BottomRight.Y)
                self.Components.Quad.Color = color
            else
                self.Components.Quad.Visible = false
            end
        end
    else
        if self.Components.Quad then
            self.Components.Quad.Visible = false
        end
    end

    -- Name and distance rendering
    if ESP.Names or ESP.Distance then
        local TagPos, Vis5 = WorldToViewportPoint(cam, locs.TagPos.Position)
        
        if Vis5 then
            local yOffset = 0
            
            -- Name
            if ESP.Names and self.Components.Name then
                self.Components.Name.Visible = true
                self.Components.Name.Position = V2new(TagPos.X, TagPos.Y + yOffset)
                self.Components.Name.Text = self.Name
                self.Components.Name.Color = color
                yOffset = yOffset + ESP.TextSize + 2
            end
            
            -- Distance
            if ESP.Distance and self.Components.Distance then
                self.Components.Distance.Visible = true
                self.Components.Distance.Position = V2new(TagPos.X, TagPos.Y + yOffset)
                self.Components.Distance.Text = floor(distance) .. "m"
                self.Components.Distance.Color = color
            end
        else
            if self.Components.Name then self.Components.Name.Visible = false end
            if self.Components.Distance then self.Components.Distance.Visible = false end
        end
    end
end

function ESP:Add(obj, options)
    if not obj.Parent and not options.RenderInNil then
        return warn(obj, "has no parent")
    end

    options = options or {}
    
    local box = setmetatable({
        Name = options.Name or obj.Name,
        Type = "Box",
        Color = options.Color,
        Size = options.Size or self.BoxSize,
        Object = obj,
        PrimaryPart = options.PrimaryPart or obj.ClassName == "Model" and (obj.PrimaryPart or obj:FindFirstChild("HumanoidRootPart") or obj:FindFirstChildWhichIsA("BasePart")) or obj:IsA("BasePart") and obj,
        Components = {},
        IsEnabled = options.IsEnabled,
        Temporary = options.Temporary,
        ColorDynamic = options.ColorDynamic,
        RenderInNil = options.RenderInNil
    }, boxBase)

    if self:GetBox(obj) then
        self:GetBox(obj):Remove()
    end

    -- Create components
    box.Components["Quad"] = Draw("Quad", {
        Thickness = self.Thickness,
        Color = box.Color or self.Color,
        Transparency = 1,
        Filled = false,
        Visible = false
    })
    
    box.Components["Name"] = Draw("Text", {
        Text = box.Name,
        Color = box.Color or self.Color,
        Center = true,
        Outline = self.TextOutline,
        Size = self.TextSize,
        Visible = false
    })
    
    box.Components["Distance"] = Draw("Text", {
        Color = box.Color or self.Color,
        Center = true,
        Outline = self.TextOutline,
        Size = self.TextSize,
        Visible = false
    })
    
    self.Objects[obj] = box
    
    -- Cleanup connections
    obj.AncestryChanged:Connect(function(_, parent)
        if parent == nil and self.AutoRemove ~= false then
            box:Remove()
        end
    end)
    
    obj:GetPropertyChangedSignal("Parent"):Connect(function()
        if obj.Parent == nil and self.AutoRemove ~= false then
            box:Remove()
        end
    end)

    return box
end

-- Main update loop
runService.RenderStepped:Connect(function()
    cam = workspace.CurrentCamera
    for i, v in (ESP.Enabled and pairs or ipairs)(ESP.Objects) do
        if v.Update then
            local s, e = pcall(v.Update, v)
            if not s then 
                warn("[ESP Error]", e, v.Object:GetFullName()) 
            end
        end
    end
end)

return ESP
