--[[
    Universal ESP System
    Structure: Any workspace location -> Folder -> Any Object Type
    ESP Name: Uses Object name directly
    Supports: Model, BasePart, MeshPart, Part, UnionOperation, and more
    Works with: Any folder structure in workspace
]]

--Settings--
local ESP = {
    -- Core Settings
    Enabled = false,
    AutoRemove = true,
    
    -- Visual Settings
    Boxes = true,
    BoxShift = CFrame.new(0, -1.5, 0),
    BoxSize = Vector3.new(4, 6, 0),
    Color = Color3.fromRGB(255, 170, 0),
    FaceCamera = false,
    Thickness = 2,
    
    -- Text Settings
    Names = true,
    Distance = true,
    Health = false,
    TextSize = 16,
    TextOutline = true,
    
    -- Universal Settings
    ShowFolderName = false, -- Show folder name in ESP
    ShowObjectType = true,  -- Show object type in ESP
    ShowFullPath = false,   -- Show full path in ESP
    
    -- Object Type Settings
    TargetTypes = {"Model", "BasePart", "MeshPart", "Part", "UnionOperation", "WedgePart", "CornerWedgePart", "TrussPart", "SpawnLocation"}, -- Types to ESP
    ScanAllTypes = true,    -- Scan all object types (overrides TargetTypes)
    
    -- Scanning Settings
    MaxDepth = 10,          -- Maximum folder depth to scan
    ScanAllFolders = true,  -- Recursively scan all folders
    
    -- Performance Settings
    MaxDistance = 1000,
    UpdateRate = 60,
    
    -- Storage
    Objects = setmetatable({}, {__mode="kv"}),
    Overrides = {},
    
    -- Highlight System
    Highlighted = nil,
    HighlightColor = Color3.fromRGB(255, 0, 0),
    
    -- Filters
    Filters = {
        Objects = function(object, folderName, objectType) return true end,
        Folders = function(folder) return true end,
        Paths = function(fullPath) return true end
    }
}

--Declarations--
local cam = workspace.CurrentCamera
local plrs = game:GetService("Players")
local plr = plrs.LocalPlayer
local runService = game:GetService("RunService")

local V3new = Vector3.new
local V2new = Vector2.new
local WorldToViewportPoint = cam.WorldToViewportPoint
local floor = math.floor

--Utility Functions--
local function Draw(obj, props)
    local new = Drawing.new(obj)
    props = props or {}
    for i, v in pairs(props) do
        new[i] = v
    end
    return new
end

local function GetDistance(pos1, pos2)
    return (pos1 - pos2).Magnitude
end

-- Check if object is a target type
local function IsTargetType(obj)
    if ESP.ScanAllTypes then
        -- Check if it's any kind of part or model
        return obj:IsA("BasePart") or obj:IsA("Model")
    else
        -- Check specific target types
        for _, targetType in pairs(ESP.TargetTypes) do
            if obj:IsA(targetType) then
                return true
            end
        end
    end
    return false
end

-- Get appropriate PrimaryPart for different object types
local function GetPrimaryPart(obj)
    if obj:IsA("Model") then
        return obj.PrimaryPart or obj:FindFirstChild("HumanoidRootPart") or obj:FindFirstChildWhichIsA("BasePart")
    elseif obj:IsA("BasePart") then
        return obj
    end
    return nil
end

-- Universal Scanning Functions
local function ScanFolderRecursive(parent, parentPath, depth, maxDepth, foundObjects)
    if depth > maxDepth then return end
    if not ESP.Filters.Folders(parent) then return end
    
    foundObjects = foundObjects or {}
    
    for _, child in pairs(parent:GetChildren()) do
        local currentPath = parentPath .. "." .. child.Name
        
        if child:IsA("Folder") then
            -- Recursively scan subfolders
            ScanFolderRecursive(child, currentPath, depth + 1, maxDepth, foundObjects)
        elseif IsTargetType(child) then
            -- Found target object
            if ESP.Filters.Objects(child, parent.Name, child.ClassName) and ESP.Filters.Paths(currentPath) then
                table.insert(foundObjects, {
                    Object = child,
                    FolderName = parent.Name,
                    ObjectName = child.Name,
                    ObjectType = child.ClassName,
                    FullPath = currentPath,
                    Depth = depth
                })
            end
        end
    end
    
    return foundObjects
end

local function ScanLocation(location)
    if not location then
        warn("Location not found!")
        return {}
    end
    
    local foundObjects = {}
    
    -- Direct children first
    for _, child in pairs(location:GetChildren()) do
        if IsTargetType(child) then
            if ESP.Filters.Objects(child, location.Name, child.ClassName) then
                table.insert(foundObjects, {
                    Object = child,
                    FolderName = location.Name,
                    ObjectName = child.Name,
                    ObjectType = child.ClassName,
                    FullPath = location.Name .. "." .. child.Name,
                    Depth = 0
                })
            end
        end
    end
    
    -- Then scan folders recursively
    if ESP.ScanAllFolders then
        for _, child in pairs(location:GetChildren()) do
            if child:IsA("Folder") then
                local nestedObjects = ScanFolderRecursive(child, location.Name .. "." .. child.Name, 1, ESP.MaxDepth)
                if nestedObjects then
                    for _, objData in pairs(nestedObjects) do
                        table.insert(foundObjects, objData)
                    end
                end
            end
        end
    end
    
    return foundObjects
end

--ESP Core Functions--
function ESP:Toggle(bool)
    self.Enabled = bool
    if not bool then
        for i, v in pairs(self.Objects) do
            if v.Type == "Box" then
                if v.Temporary then
                    v:Remove()
                else
                    for _, component in pairs(v.Components) do
                        component.Visible = false
                    end
                end
            end
        end
    end
end

function ESP:GetBox(obj)
    return self.Objects[obj]
end

function ESP:SetHighlight(obj, color)
    self.Highlighted = obj
    self.HighlightColor = color or Color3.fromRGB(255, 0, 0)
end

function ESP:ClearHighlight()
    self.Highlighted = nil
end

-- Universal Object Listener
function ESP:AddUniversalListener(location, options)
    options = options or {}
    
    -- If location is a string, find it in workspace
    if type(location) == "string" then
        location = workspace:FindFirstChild(location)
        if not location then
            warn("Location '" .. tostring(location) .. "' not found in workspace!")
            return
        end
    end
    
    local function ProcessObject(objectData)
        local obj = objectData.Object
        local folderName = objectData.FolderName
        local objectName = objectData.ObjectName
        local objectType = objectData.ObjectType
        local fullPath = objectData.FullPath
        local depth = objectData.Depth
        
        if not options.Validator or options.Validator(obj, folderName, objectName, objectType, fullPath, depth) then
            local displayName = objectName
            
            -- Build display name based on settings
            if ESP.ShowFullPath then
                displayName = fullPath
            elseif ESP.ShowFolderName and ESP.ShowObjectType then
                displayName = folderName .. " - " .. objectName .. " (" .. objectType .. ")"
            elseif ESP.ShowFolderName then
                displayName = folderName .. " - " .. objectName
            elseif ESP.ShowObjectType then
                displayName = objectName .. " (" .. objectType .. ")"
            end
            
            local box = ESP:Add(obj, {
                PrimaryPart = GetPrimaryPart(obj),
                Color = type(options.Color) == "function" and options.Color(obj, folderName, objectName, objectType, fullPath, depth) or options.Color,
                ColorDynamic = options.ColorDynamic,
                Name = type(options.CustomName) == "function" and options.CustomName(obj, folderName, objectName, objectType, fullPath, depth) or displayName,
                IsEnabled = options.IsEnabled,
                RenderInNil = options.RenderInNil,
                Size = options.Size,
                Temporary = options.Temporary
            })
            
            if options.OnAdded then
                coroutine.wrap(options.OnAdded)(box, objectData)
            end
        end
    end
    
    -- Initial scan
    local function InitialScan()
        local allObjects = ScanLocation(location)
        for _, objectData in pairs(allObjects) do
            ProcessObject(objectData)
        end
    end
    
    InitialScan()
    
    -- Listen for new objects
    local function SetupListeners(parent, parentPath, depth)
        if depth > ESP.MaxDepth then return end
        
        parent.ChildAdded:Connect(function(child)
            local currentPath = parentPath .. "." .. child.Name
            
            if child:IsA("Folder") then
                task.wait(0.1) -- Wait for folder to populate
                
                -- Set up listeners for new folder
                SetupListeners(child, currentPath, depth + 1)
                
                -- Process existing objects in new folder
                local nestedObjects = ScanFolderRecursive(child, currentPath, depth + 1, ESP.MaxDepth)
                if nestedObjects then
                    for _, objData in pairs(nestedObjects) do
                        ProcessObject(objData)
                    end
                end
            elseif IsTargetType(child) then
                if ESP.Filters.Objects(child, parent.Name, child.ClassName) and ESP.Filters.Paths(currentPath) then
                    ProcessObject({
                        Object = child,
                        FolderName = parent.Name,
                        ObjectName = child.Name,
                        ObjectType = child.ClassName,
                        FullPath = currentPath,
                        Depth = depth
                    })
                end
            end
        end)
    end
    
    -- Set up listeners for the main location
    SetupListeners(location, location.Name, 0)
    
    -- Set up listeners for existing folders
    local function SetupExistingFolders(parent, parentPath, depth)
        if depth > ESP.MaxDepth then return end
        
        for _, child in pairs(parent:GetChildren()) do
            if child:IsA("Folder") then
                local currentPath = parentPath .. "." .. child.Name
                SetupListeners(child, currentPath, depth + 1)
                SetupExistingFolders(child, currentPath, depth + 1)
            end
        end
    end
    
    SetupExistingFolders(location, location.Name, 0)
end

-- Convenience methods for common locations
function ESP:AddNaturalPickupsListener(options)
    return self:AddUniversalListener("NaturalPickups", options)
end

function ESP:AddWorkspaceListener(options)
    return self:AddUniversalListener(workspace, options)
end

-- Add method to set target types
function ESP:SetTargetTypes(types)
    self.TargetTypes = types
end

-- Add method to add target type
function ESP:AddTargetType(typeName)
    if not table.find(self.TargetTypes, typeName) then
        table.insert(self.TargetTypes, typeName)
    end
end

-- Add method to remove target type
function ESP:RemoveTargetType(typeName)
    local index = table.find(self.TargetTypes, typeName)
    if index then
        table.remove(self.TargetTypes, index)
    end
end

-- Method to clear all ESP
function ESP:ClearAll()
    for obj, box in pairs(self.Objects) do
        box:Remove()
    end
end

-- Method to get all ESP objects
function ESP:GetAllObjects()
    return self.Objects
end

-- Method to get ESP count
function ESP:GetCount()
    local count = 0
    for _ in pairs(self.Objects) do
        count = count + 1
    end
    return count
end

--Box Class--
local boxBase = {}
boxBase.__index = boxBase

function boxBase:Remove()
    ESP.Objects[self.Object] = nil
    for i, v in pairs(self.Components) do
        v.Visible = false
        v:Remove()
        self.Components[i] = nil
    end
end

function boxBase:SetColor(color)
    self.Color = color
end

function boxBase:SetName(name)
    self.Name = name
end

function boxBase:Update()
    if not self.PrimaryPart then
        return self:Remove()
    end

    local color = self.Color or ESP.Color
    
    -- Highlight override
    if ESP.Highlighted == self.Object then
        color = ESP.HighlightColor
    end

    -- Check if should render
    local allow = true
    
    -- Distance check
    local distance = GetDistance(cam.CFrame.Position, self.PrimaryPart.Position)
    if distance > ESP.MaxDistance then
        allow = false
    end
    
    -- Enabled check
    if self.IsEnabled and (type(self.IsEnabled) == "string" and not ESP[self.IsEnabled] or 
                          type(self.IsEnabled) == "function" and not self:IsEnabled()) then
        allow = false
    end
    
    -- Parent check
    if not workspace:IsAncestorOf(self.PrimaryPart) and not self.RenderInNil then
        allow = false
    end

    if not allow then
        for i, v in pairs(self.Components) do
            v.Visible = false
        end
        return
    end

    -- Calculations
    local cf = self.PrimaryPart.CFrame
    if ESP.FaceCamera then
        cf = CFrame.new(cf.Position, cam.CFrame.Position)
    end
    
    local size = self.Size
    local locs = {
        TopLeft = cf * ESP.BoxShift * CFrame.new(size.X/2, size.Y/2, 0),
        TopRight = cf * ESP.BoxShift * CFrame.new(-size.X/2, size.Y/2, 0),
        BottomLeft = cf * ESP.BoxShift * CFrame.new(size.X/2, -size.Y/2, 0),
        BottomRight = cf * ESP.BoxShift * CFrame.new(-size.X/2, -size.Y/2, 0),
        TagPos = cf * ESP.BoxShift * CFrame.new(0, size.Y/2, 0),
        Torso = cf * ESP.BoxShift
    }

    -- Box rendering
    if ESP.Boxes then
        local TopLeft, Vis1 = WorldToViewportPoint(cam, locs.TopLeft.Position)
        local TopRight, Vis2 = WorldToViewportPoint(cam, locs.TopRight.Position)
        local BottomLeft, Vis3 = WorldToViewportPoint(cam, locs.BottomLeft.Position)
        local BottomRight, Vis4 = WorldToViewportPoint(cam, locs.BottomRight.Position)

        if self.Components.Quad then
            if Vis1 or Vis2 or Vis3 or Vis4 then
                self.Components.Quad.Visible = true
                self.Components.Quad.PointA = V2new(TopRight.X, TopRight.Y)
                self.Components.Quad.PointB = V2new(TopLeft.X, TopLeft.Y)
                self.Components.Quad.PointC = V2new(BottomLeft.X, BottomLeft.Y)
                self.Components.Quad.PointD = V2new(BottomRight.X, BottomRight.Y)
                self.Components.Quad.Color = color
            else
                self.Components.Quad.Visible = false
            end
        end
    else
        if self.Components.Quad then
            self.Components.Quad.Visible = false
        end
    end

    -- Name and distance rendering
    if ESP.Names or ESP.Distance then
        local TagPos, Vis5 = WorldToViewportPoint(cam, locs.TagPos.Position)
        
        if Vis5 then
            local yOffset = 0
            
            -- Name
            if ESP.Names and self.Components.Name then
                self.Components.Name.Visible = true
                self.Components.Name.Position = V2new(TagPos.X, TagPos.Y + yOffset)
                self.Components.Name.Text = self.Name
                self.Components.Name.Color = color
                yOffset = yOffset + ESP.TextSize + 2
            end
            
            -- Distance
            if ESP.Distance and self.Components.Distance then
                self.Components.Distance.Visible = true
                self.Components.Distance.Position = V2new(TagPos.X, TagPos.Y + yOffset)
                self.Components.Distance.Text = floor(distance) .. "m"
                self.Components.Distance.Color = color
            end
        else
            if self.Components.Name then self.Components.Name.Visible = false end
            if self.Components.Distance then self.Components.Distance.Visible = false end
        end
    end
end

function ESP:Add(obj, options)
    if not obj.Parent and not options.RenderInNil then
        return warn(obj, "has no parent")
    end

    options = options or {}
    
    local box = setmetatable({
        Name = options.Name or obj.Name,
        Type = "Box",
        Color = options.Color,
        Size = options.Size or self.BoxSize,
        Object = obj,
        PrimaryPart = options.PrimaryPart or obj.ClassName == "Model" and (obj.PrimaryPart or obj:FindFirstChild("HumanoidRootPart") or obj:FindFirstChildWhichIsA("BasePart")) or obj:IsA("BasePart") and obj,
        Components = {},
        IsEnabled = options.IsEnabled,
        Temporary = options.Temporary,
        ColorDynamic = options.ColorDynamic,
        RenderInNil = options.RenderInNil
    }, boxBase)

    if self:GetBox(obj) then
        self:GetBox(obj):Remove()
    end

    -- Create components
    box.Components["Quad"] = Draw("Quad", {
        Thickness = self.Thickness,
        Color = box.Color or self.Color,
        Transparency = 1,
        Filled = false,
        Visible = false
    })
    
    box.Components["Name"] = Draw("Text", {
        Text = box.Name,
        Color = box.Color or self.Color,
        Center = true,
        Outline = self.TextOutline,
        Size = self.TextSize,
        Visible = false
    })
    
    box.Components["Distance"] = Draw("Text", {
        Color = box.Color or self.Color,
        Center = true,
        Outline = self.TextOutline,
        Size = self.TextSize,
        Visible = false
    })
    
    self.Objects[obj] = box
    
    -- Cleanup connections
    obj.AncestryChanged:Connect(function(_, parent)
        if parent == nil and self.AutoRemove ~= false then
            box:Remove()
        end
    end)
    
    obj:GetPropertyChangedSignal("Parent"):Connect(function()
        if obj.Parent == nil and self.AutoRemove ~= false then
            box:Remove()
        end
    end)

    return box
end

-- Main update loop
runService.RenderStepped:Connect(function()
    cam = workspace.CurrentCamera
    for i, v in (ESP.Enabled and pairs or ipairs)(ESP.Objects) do
        if v.Update then
            local s, e = pcall(v.Update, v)
            if not s then 
                warn("[ESP Error]", e, v.Object:GetFullName()) 
            end
        end
    end
end)

return ESP

--[[
    Usage Examples:

    1. ESP for NaturalPickups (original functionality):
    ESP:Toggle(true)
    ESP:AddNaturalPickupsListener()

    2. ESP for any workspace location:
    ESP:AddUniversalListener("SomeFolder")
    ESP:AddUniversalListener(workspace.SomeFolder)

    3. ESP for entire workspace:
    ESP:AddWorkspaceListener()

    4. ESP with specific object types:
    ESP.ScanAllTypes = false
    ESP:SetTargetTypes({"Part", "MeshPart"})
    ESP:AddUniversalListener("SomeFolder")

    5. ESP with custom filters:
    ESP.Filters.Objects = function(obj, folderName, objectType)
        return objectType == "Part" and obj.Name:find("Important")
    end
    ESP:AddUniversalListener("SomeFolder")

    6. ESP with custom colors by object type:
    ESP:AddUniversalListener("SomeFolder", {
        Color = function(obj, folderName, objectName, objectType)
            if objectType == "Model" then return Color3.fromRGB(255, 0, 0)
            elseif objectType == "Part" then return Color3.fromRGB(0, 255, 0)
            else return Color3.fromRGB(0, 0, 255)
            end
        end
    })

    7. ESP with path filtering:
    ESP.Filters.Paths = function(fullPath)
        return fullPath:find("Important") or fullPath:find("Loot")
    end
    ESP:AddUniversalListener("SomeFolder")

    8. Clear all ESP:
    ESP:ClearAll()

    9. Get ESP count:
    print("ESP Objects:", ESP:GetCount())
]]
