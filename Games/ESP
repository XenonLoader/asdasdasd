--[[
    Enhanced ESP System for Nested Folder Structures
    Supports deep folder scanning and object detection
]]

--Settings--
local ESP = {
    -- Core Settings
    Enabled = false,
    AutoRemove = true,
    
    -- Visual Settings
    Boxes = true,
    BoxShift = CFrame.new(0, -1.5, 0),
    BoxSize = Vector3.new(4, 6, 0),
    Color = Color3.fromRGB(255, 170, 0),
    FaceCamera = false,
    Thickness = 2,
    
    -- Text Settings
    Names = true,
    Distance = true,
    Health = true,
    TextSize = 16,
    TextOutline = true,
    
    -- Team Settings
    TeamColor = true,
    TeamMates = true,
    
    -- Player Settings
    Players = true,
    ShowSelf = false,
    
    -- Tracer Settings
    Tracers = false,
    TracerOrigin = "Bottom",
    AttachShift = 1,
    
    -- Health Bar Settings
    HealthBars = true,
    HealthBarSize = Vector2.new(4, 60),
    HealthBarOffset = Vector3.new(-3, 0, 0),
    
    -- Nested Folder Settings
    MaxDepth = 10, -- Maximum folder depth to scan
    ScanAllFolders = true, -- Scan all folders recursively
    TargetTypes = {"Model", "MeshPart", "BasePart", "Part", "UnionOperation"}, -- Types to ESP
    
    -- Performance Settings
    MaxDistance = 1000,
    UpdateRate = 60,
    
    -- Storage
    Objects = setmetatable({}, {__mode="kv"}),
    Overrides = {},
    
    -- Highlight System
    Highlighted = nil,
    HighlightColor = Color3.fromRGB(255, 0, 0),
    
    -- Filters
    Filters = {
        Players = function(player) return true end,
        Objects = function(object) return true end,
        Folders = function(folder) return true end -- New folder filter
    }
}

--Declarations--
local cam = workspace.CurrentCamera
local plrs = game:GetService("Players")
local plr = plrs.LocalPlayer
local runService = game:GetService("RunService")
local mouse = plr:GetMouse()

local V3new = Vector3.new
local V2new = Vector2.new
local WorldToViewportPoint = cam.WorldToViewportPoint
local floor = math.floor
local huge = math.huge

--Utility Functions--
local function Draw(obj, props)
    local new = Drawing.new(obj)
    props = props or {}
    for i, v in pairs(props) do
        new[i] = v
    end
    return new
end

local function GetDistance(pos1, pos2)
    return (pos1 - pos2).Magnitude
end

local function IsOnScreen(pos)
    local _, onScreen = WorldToViewportPoint(cam, pos)
    return onScreen
end

-- Nested Folder Scanning Functions
local function IsTargetType(obj)
    for _, targetType in pairs(ESP.TargetTypes) do
        if obj:IsA(targetType) then
            return true
        end
    end
    return false
end

local function ScanFolderRecursive(folder, depth, maxDepth, foundObjects)
    if depth > maxDepth then return end
    if not ESP.Filters.Folders(folder) then return end
    
    foundObjects = foundObjects or {}
    
    for _, child in pairs(folder:GetChildren()) do
        if child:IsA("Folder") then
            -- Recursively scan subfolders
            ScanFolderRecursive(child, depth + 1, maxDepth, foundObjects)
        elseif IsTargetType(child) then
            -- Found target object
            table.insert(foundObjects, {
                Object = child,
                Path = folder:GetFullName() .. "." .. child.Name,
                Depth = depth
            })
        end
    end
    
    return foundObjects
end

local function GetAllNestedObjects(parent)
    local allObjects = {}
    
    -- Direct children first
    for _, child in pairs(parent:GetChildren()) do
        if IsTargetType(child) then
            table.insert(allObjects, {
                Object = child,
                Path = child:GetFullName(),
                Depth = 0
            })
        end
    end
    
    -- Then scan folders recursively
    if ESP.ScanAllFolders then
        for _, child in pairs(parent:GetChildren()) do
            if child:IsA("Folder") then
                local nestedObjects = ScanFolderRecursive(child, 1, ESP.MaxDepth)
                if nestedObjects then
                    for _, objData in pairs(nestedObjects) do
                        table.insert(allObjects, objData)
                    end
                end
            end
        end
    end
    
    return allObjects
end

--ESP Core Functions--
function ESP:GetTeam(p)
    local ov = self.Overrides.GetTeam
    if ov then
        return ov(p)
    end
    return p and p.Team
end

function ESP:IsTeamMate(p)
    local ov = self.Overrides.IsTeamMate
    if ov then
        return ov(p)
    end
    return self:GetTeam(p) == self:GetTeam(plr)
end

function ESP:GetColor(obj)
    local ov = self.Overrides.GetColor
    if ov then
        return ov(obj)
    end
    
    local p = self:GetPlrFromChar(obj)
    if p and self.TeamColor and p.Team then
        return p.Team.TeamColor.Color
    end
    
    return self.Color
end

function ESP:GetPlrFromChar(char)
    local ov = self.Overrides.GetPlrFromChar
    if ov then
        return ov(char)
    end
    return plrs:GetPlayerFromCharacter(char)
end

function ESP:GetHealth(obj)
    local humanoid = obj:FindFirstChildOfClass("Humanoid")
    if humanoid then
        return humanoid.Health, humanoid.MaxHealth
    end
    return 100, 100
end

function ESP:Toggle(bool)
    self.Enabled = bool
    if not bool then
        for i, v in pairs(self.Objects) do
            if v.Type == "Box" then
                if v.Temporary then
                    v:Remove()
                else
                    for _, component in pairs(v.Components) do
                        component.Visible = false
                    end
                end
            end
        end
    end
end

function ESP:GetBox(obj)
    return self.Objects[obj]
end

function ESP:SetHighlight(obj, color)
    self.Highlighted = obj
    self.HighlightColor = color or Color3.fromRGB(255, 0, 0)
end

function ESP:ClearHighlight()
    self.Highlighted = nil
end

-- Enhanced Object Listener for Nested Folders
function ESP:AddNestedObjectListener(parent, options)
    options = options or {}
    
    local function ProcessObject(objData)
        local obj = objData.Object
        local path = objData.Path
        local depth = objData.Depth
        
        if not options.Validator or options.Validator(obj, path, depth) then
            local box = ESP:Add(obj, {
                PrimaryPart = type(options.PrimaryPart) == "string" and obj:WaitForChild(options.PrimaryPart) or 
                             type(options.PrimaryPart) == "function" and options.PrimaryPart(obj) or nil,
                Color = type(options.Color) == "function" and options.Color(obj, path, depth) or options.Color,
                ColorDynamic = options.ColorDynamic,
                Name = type(options.CustomName) == "function" and options.CustomName(obj, path, depth) or 
                       options.CustomName or (obj.Name .. " (D:" .. depth .. ")"),
                IsEnabled = options.IsEnabled,
                RenderInNil = options.RenderInNil,
                Size = options.Size,
                Temporary = options.Temporary
            })
            
            if options.OnAdded then
                coroutine.wrap(options.OnAdded)(box, objData)
            end
        end
    end
    
    local function ScanAndProcess()
        local allObjects = GetAllNestedObjects(parent)
        for _, objData in pairs(allObjects) do
            ProcessObject(objData)
        end
    end
    
    -- Initial scan
    ScanAndProcess()
    
    -- Listen for new objects
    local function NewListener(c)
        if IsTargetType(c) then
            ProcessObject({
                Object = c,
                Path = c:GetFullName(),
                Depth = 0
            })
        elseif c:IsA("Folder") then
            -- New folder added, scan it
            task.wait(0.1) -- Wait for folder to populate
            local nestedObjects = ScanFolderRecursive(c, 1, ESP.MaxDepth)
            if nestedObjects then
                for _, objData in pairs(nestedObjects) do
                    ProcessObject(objData)
                end
            end
        end
    end
    
    parent.DescendantAdded:Connect(NewListener)
end

-- Regular Object Listener (for compatibility)
function ESP:AddObjectListener(parent, options)
    local function NewListener(c)
        if type(options.Type) == "string" and c:IsA(options.Type) or options.Type == nil then
            if type(options.Name) == "string" and c.Name == options.Name or options.Name == nil then
                if not options.Validator or options.Validator(c) then
                    local box = ESP:Add(c, {
                        PrimaryPart = type(options.PrimaryPart) == "string" and c:WaitForChild(options.PrimaryPart) or 
                                     type(options.PrimaryPart) == "function" and options.PrimaryPart(c),
                        Color = type(options.Color) == "function" and options.Color(c) or options.Color,
                        ColorDynamic = options.ColorDynamic,
                        Name = type(options.CustomName) == "function" and options.CustomName(c) or options.CustomName,
                        IsEnabled = options.IsEnabled,
                        RenderInNil = options.RenderInNil,
                        Size = options.Size
                    })
                    
                    if options.OnAdded then
                        coroutine.wrap(options.OnAdded)(box)
                    end
                end
            end
        end
    end

    if options.Recursive then
        parent.DescendantAdded:Connect(NewListener)
        for i, v in pairs(parent:GetDescendants()) do
            coroutine.wrap(NewListener)(v)
        end
    else
        parent.ChildAdded:Connect(NewListener)
        for i, v in pairs(parent:GetChildren()) do
            coroutine.wrap(NewListener)(v)
        end
    end
end

--Box Class--
local boxBase = {}
boxBase.__index = boxBase

function boxBase:Remove()
    ESP.Objects[self.Object] = nil
    for i, v in pairs(self.Components) do
        v.Visible = false
        v:Remove()
        self.Components[i] = nil
    end
end

function boxBase:SetColor(color)
    self.Color = color
end

function boxBase:SetName(name)
    self.Name = name
end

function boxBase:Update()
    if not self.PrimaryPart then
        return self:Remove()
    end

    local color = self.Color or ESP:GetColor(self.Object) or ESP.Color
    
    -- Highlight override
    if ESP.Highlighted == self.Object then
        color = ESP.HighlightColor
    end

    -- Check if should render
    local allow = true
    
    -- Distance check
    local distance = GetDistance(cam.CFrame.Position, self.PrimaryPart.Position)
    if distance > ESP.MaxDistance then
        allow = false
    end
    
    -- Custom filters
    if self.Player and not ESP.Filters.Players(self.Player) then
        allow = false
    end
    
    if not self.Player and not ESP.Filters.Objects(self.Object) then
        allow = false
    end
    
    -- Override checks
    if ESP.Overrides.UpdateAllow and not ESP.Overrides.UpdateAllow(self) then
        allow = false
    end
    
    -- Team check
    if self.Player and not ESP.TeamMates and ESP:IsTeamMate(self.Player) then
        allow = false
    end
    
    -- Player check
    if self.Player and not ESP.Players then
        allow = false
    end
    
    -- Self check
    if self.Player == plr and not ESP.ShowSelf then
        allow = false
    end
    
    -- Enabled check
    if self.IsEnabled and (type(self.IsEnabled) == "string" and not ESP[self.IsEnabled] or 
                          type(self.IsEnabled) == "function" and not self:IsEnabled()) then
        allow = false
    end
    
    -- Parent check
    if not workspace:IsAncestorOf(self.PrimaryPart) and not self.RenderInNil then
        allow = false
    end

    if not allow then
        for i, v in pairs(self.Components) do
            v.Visible = false
        end
        return
    end

    -- Calculations
    local cf = self.PrimaryPart.CFrame
    if ESP.FaceCamera then
        cf = CFrame.new(cf.Position, cam.CFrame.Position)
    end
    
    local size = self.Size
    local locs = {
        TopLeft = cf * ESP.BoxShift * CFrame.new(size.X/2, size.Y/2, 0),
        TopRight = cf * ESP.BoxShift * CFrame.new(-size.X/2, size.Y/2, 0),
        BottomLeft = cf * ESP.BoxShift * CFrame.new(size.X/2, -size.Y/2, 0),
        BottomRight = cf * ESP.BoxShift * CFrame.new(-size.X/2, -size.Y/2, 0),
        TagPos = cf * ESP.BoxShift * CFrame.new(0, size.Y/2, 0),
        Torso = cf * ESP.BoxShift,
        HealthBarPos = cf * ESP.BoxShift * CFrame.new(ESP.HealthBarOffset.X, 0, ESP.HealthBarOffset.Z)
    }

    -- Box rendering
    if ESP.Boxes then
        local TopLeft, Vis1 = WorldToViewportPoint(cam, locs.TopLeft.Position)
        local TopRight, Vis2 = WorldToViewportPoint(cam, locs.TopRight.Position)
        local BottomLeft, Vis3 = WorldToViewportPoint(cam, locs.BottomLeft.Position)
        local BottomRight, Vis4 = WorldToViewportPoint(cam, locs.BottomRight.Position)

        if self.Components.Quad then
            if Vis1 or Vis2 or Vis3 or Vis4 then
                self.Components.Quad.Visible = true
                self.Components.Quad.PointA = V2new(TopRight.X, TopRight.Y)
                self.Components.Quad.PointB = V2new(TopLeft.X, TopLeft.Y)
                self.Components.Quad.PointC = V2new(BottomLeft.X, BottomLeft.Y)
                self.Components.Quad.PointD = V2new(BottomRight.X, BottomRight.Y)
                self.Components.Quad.Color = color
            else
                self.Components.Quad.Visible = false
            end
        end
    else
        if self.Components.Quad then
            self.Components.Quad.Visible = false
        end
    end

    -- Name and distance rendering
    if ESP.Names or ESP.Distance then
        local TagPos, Vis5 = WorldToViewportPoint(cam, locs.TagPos.Position)
        
        if Vis5 then
            local yOffset = 0
            
            -- Name
            if ESP.Names and self.Components.Name then
                self.Components.Name.Visible = true
                self.Components.Name.Position = V2new(TagPos.X, TagPos.Y + yOffset)
                self.Components.Name.Text = self.Name
                self.Components.Name.Color = color
                yOffset = yOffset + ESP.TextSize + 2
            end
            
            -- Distance
            if ESP.Distance and self.Components.Distance then
                self.Components.Distance.Visible = true
                self.Components.Distance.Position = V2new(TagPos.X, TagPos.Y + yOffset)
                self.Components.Distance.Text = floor(distance) .. "m"
                self.Components.Distance.Color = color
                yOffset = yOffset + ESP.TextSize + 2
            end
            
            -- Health text
            if ESP.Health and self.Components.HealthText then
                local health, maxHealth = ESP:GetHealth(self.Object)
                self.Components.HealthText.Visible = true
                self.Components.HealthText.Position = V2new(TagPos.X, TagPos.Y + yOffset)
                self.Components.HealthText.Text = floor(health) .. "/" .. floor(maxHealth)
                self.Components.HealthText.Color = Color3.fromRGB(
                    255 * (1 - health/maxHealth),
                    255 * (health/maxHealth),
                    0
                )
            end
        else
            if self.Components.Name then self.Components.Name.Visible = false end
            if self.Components.Distance then self.Components.Distance.Visible = false end
            if self.Components.HealthText then self.Components.HealthText.Visible = false end
        end
    end
    
    -- Health bar rendering
    if ESP.HealthBars and self.Components.HealthBarBG and self.Components.HealthBarFill then
        local HealthBarPos, Vis6 = WorldToViewportPoint(cam, locs.HealthBarPos.Position)
        
        if Vis6 then
            local health, maxHealth = ESP:GetHealth(self.Object)
            local healthPercent = health / maxHealth
            
            -- Background
            self.Components.HealthBarBG.Visible = true
            self.Components.HealthBarBG.Position = V2new(HealthBarPos.X, HealthBarPos.Y - ESP.HealthBarSize.Y/2)
            self.Components.HealthBarBG.Size = ESP.HealthBarSize
            self.Components.HealthBarBG.Color = Color3.fromRGB(0, 0, 0)
            
            -- Fill
            self.Components.HealthBarFill.Visible = true
            self.Components.HealthBarFill.Position = V2new(HealthBarPos.X, HealthBarPos.Y - ESP.HealthBarSize.Y/2 + ESP.HealthBarSize.Y * (1 - healthPercent))
            self.Components.HealthBarFill.Size = V2new(ESP.HealthBarSize.X, ESP.HealthBarSize.Y * healthPercent)
            self.Components.HealthBarFill.Color = Color3.fromRGB(
                255 * (1 - healthPercent),
                255 * healthPercent,
                0
            )
        else
            self.Components.HealthBarBG.Visible = false
            self.Components.HealthBarFill.Visible = false
        end
    end
    
    -- Tracer rendering
    if ESP.Tracers and self.Components.Tracer then
        local TorsoPos, Vis7 = WorldToViewportPoint(cam, locs.Torso.Position)

        if Vis7 then
            self.Components.Tracer.Visible = true
            self.Components.Tracer.From = V2new(TorsoPos.X, TorsoPos.Y)
            
            local tracerTo
            if ESP.TracerOrigin == "Top" then
                tracerTo = V2new(cam.ViewportSize.X/2, 0)
            elseif ESP.TracerOrigin == "Center" then
                tracerTo = V2new(cam.ViewportSize.X/2, cam.ViewportSize.Y/2)
            else -- Bottom
                tracerTo = V2new(cam.ViewportSize.X/2, cam.ViewportSize.Y/ESP.AttachShift)
            end
            
            self.Components.Tracer.To = tracerTo
            self.Components.Tracer.Color = color
        else
            self.Components.Tracer.Visible = false
        end
    end
end

function ESP:Add(obj, options)
    if not obj.Parent and not options.RenderInNil then
        return warn(obj, "has no parent")
    end

    options = options or {}
    
    local box = setmetatable({
        Name = options.Name or obj.Name,
        Type = "Box",
        Color = options.Color,
        Size = options.Size or self.BoxSize,
        Object = obj,
        Player = options.Player or plrs:GetPlayerFromCharacter(obj),
        PrimaryPart = options.PrimaryPart or obj.ClassName == "Model" and (obj.PrimaryPart or obj:FindFirstChild("HumanoidRootPart") or obj:FindFirstChildWhichIsA("BasePart")) or obj:IsA("BasePart") and obj,
        Components = {},
        IsEnabled = options.IsEnabled,
        Temporary = options.Temporary,
        ColorDynamic = options.ColorDynamic,
        RenderInNil = options.RenderInNil
    }, boxBase)

    if self:GetBox(obj) then
        self:GetBox(obj):Remove()
    end

    -- Create components
    box.Components["Quad"] = Draw("Quad", {
        Thickness = self.Thickness,
        Color = box.Color or self.Color,
        Transparency = 1,
        Filled = false,
        Visible = false
    })
    
    box.Components["Name"] = Draw("Text", {
        Text = box.Name,
        Color = box.Color or self.Color,
        Center = true,
        Outline = self.TextOutline,
        Size = self.TextSize,
        Visible = false
    })
    
    box.Components["Distance"] = Draw("Text", {
        Color = box.Color or self.Color,
        Center = true,
        Outline = self.TextOutline,
        Size = self.TextSize,
        Visible = false
    })
    
    box.Components["HealthText"] = Draw("Text", {
        Color = Color3.fromRGB(0, 255, 0),
        Center = true,
        Outline = self.TextOutline,
        Size = self.TextSize,
        Visible = false
    })
    
    box.Components["HealthBarBG"] = Draw("Square", {
        Color = Color3.fromRGB(0, 0, 0),
        Filled = true,
        Visible = false
    })
    
    box.Components["HealthBarFill"] = Draw("Square", {
        Color = Color3.fromRGB(0, 255, 0),
        Filled = true,
        Visible = false
    })
    
    box.Components["Tracer"] = Draw("Line", {
        Thickness = self.Thickness,
        Color = box.Color or self.Color,
        Transparency = 1,
        Visible = false
    })
    
    self.Objects[obj] = box
    
    -- Cleanup connections
    obj.AncestryChanged:Connect(function(_, parent)
        if parent == nil and self.AutoRemove ~= false then
            box:Remove()
        end
    end)
    
    obj:GetPropertyChangedSignal("Parent"):Connect(function()
        if obj.Parent == nil and self.AutoRemove ~= false then
            box:Remove()
        end
    end)

    local hum = obj:FindFirstChildOfClass("Humanoid")
    if hum then
        hum.Died:Connect(function()
            if self.AutoRemove ~= false then
                box:Remove()
            end
        end)
    end

    return box
end

-- Player ESP Setup
local function CharAdded(char)
    local p = plrs:GetPlayerFromCharacter(char)
    if not char:FindFirstChild("HumanoidRootPart") then
        local ev
        ev = char.ChildAdded:Connect(function(c)
            if c.Name == "HumanoidRootPart" then
                ev:Disconnect()
                ESP:Add(char, {
                    Name = p.Name,
                    Player = p,
                    PrimaryPart = c
                })
            end
        end)
    else
        ESP:Add(char, {
            Name = p.Name,
            Player = p,
            PrimaryPart = char.HumanoidRootPart
        })
    end
end

local function PlayerAdded(p)
    p.CharacterAdded:Connect(CharAdded)
    if p.Character then
        coroutine.wrap(CharAdded)(p.Character)
    end
end

plrs.PlayerAdded:Connect(PlayerAdded)
for i, v in pairs(plrs:GetPlayers()) do
    if v ~= plr then
        PlayerAdded(v)
    end
end

-- Main update loop
runService.RenderStepped:Connect(function()
    cam = workspace.CurrentCamera
    for i, v in (ESP.Enabled and pairs or ipairs)(ESP.Objects) do
        if v.Update then
            local s, e = pcall(v.Update, v)
            if not s then 
                warn("[ESP Error]", e, v.Object:GetFullName()) 
            end
        end
    end
end)

return ESP
