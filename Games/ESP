--[[
    Universal ESP System with Enhanced Auto-Detection
    Structure: Any workspace location -> Folder -> Any Object Type
    ESP Name: Uses Object name directly
    Supports: Model, BasePart, MeshPart, Part, UnionOperation, and more
    Works with: Any folder structure in workspace with intelligent monitoring
]]

--Settings--
local ESP = {
    -- Core Settings
    Enabled = false,
    AutoRemove = true,
    
    -- Visual Settings
    Boxes = true,
    BoxShift = CFrame.new(0, -1.5, 0),
    BoxSize = Vector3.new(4, 6, 0),
    Color = Color3.fromRGB(255, 170, 0),
    FaceCamera = false,
    Thickness = 2,
    
    -- Text Settings
    Names = true,
    Distance = true,
    Health = false,
    TextSize = 16,
    TextOutline = true,
    
    -- Universal Settings
    ShowFolderName = false, -- Show folder name in ESP
    ShowObjectType = true,  -- Show object type in ESP
    ShowFullPath = false,   -- Show full path in ESP
    
    -- Object Type Settings
    TargetTypes = {"Model", "BasePart", "MeshPart", "Part", "UnionOperation", "WedgePart", "CornerWedgePart", "TrussPart", "SpawnLocation"}, -- Types to ESP
    ScanAllTypes = true,    -- Scan all object types (overrides TargetTypes)
    
    -- Enhanced Auto-Detection Settings
    MaxDepth = 15,          -- Maximum folder depth to scan
    ScanAllFolders = true,  -- Recursively scan all folders
    AutoRefresh = true,     -- Automatically refresh when folders change
    RefreshDelay = 0.1,     -- Delay before processing new folders (reduced for faster detection)
    SmartDetection = true,  -- Use intelligent detection patterns
    DeepScan = true,        -- Enable deep nested folder scanning
    InstantDetection = true, -- Immediate detection of new objects
    
    -- Performance Settings
    MaxDistance = 1000,
    UpdateRate = 60,
    BatchSize = 100,        -- Increased batch size for better performance
    
    -- Storage
    Objects = setmetatable({}, {__mode="kv"}),
    Overrides = {},
    Listeners = {},         -- Store active listeners
    MonitoredFolders = {},  -- Track monitored folders
    FolderCache = {},       -- Cache folder structures for faster access
    
    -- Highlight System
    Highlighted = nil,
    HighlightColor = Color3.fromRGB(255, 0, 0),
    
    -- Enhanced Filters
    Filters = {
        Objects = function(object, folderName, objectType, fullPath, depth) return true end,
        Folders = function(folder, folderPath, depth) return true end,
        Paths = function(fullPath) return true end,
        Names = function(objectName) return true end
    }
}

--Declarations--
local cam = workspace.CurrentCamera
local plrs = game:GetService("Players")
local plr = plrs.LocalPlayer
local runService = game:GetService("RunService")

local V3new = Vector3.new
local V2new = Vector2.new
local WorldToViewportPoint = cam.WorldToViewportPoint
local floor = math.floor

--Utility Functions--
local function Draw(obj, props)
    local new = Drawing.new(obj)
    props = props or {}
    for i, v in pairs(props) do
        new[i] = v
    end
    return new
end

local function GetDistance(pos1, pos2)
    return (pos1 - pos2).Magnitude
end

-- Enhanced object type checking with immediate detection
local function IsTargetType(obj)
    if not obj or not obj.Parent then return false end
    
    if ESP.ScanAllTypes then
        -- Comprehensive type checking for immediate detection
        return obj:IsA("BasePart") or 
               obj:IsA("Model") or 
               obj:IsA("Attachment") or 
               obj:IsA("Tool") or
               obj:IsA("Accessory") or
               obj:IsA("Hat") or
               obj:IsA("Humanoid") or
               obj:IsA("ClickDetector") or
               obj:IsA("ProximityPrompt")
    else
        -- Fast lookup for specific target types
        for _, targetType in pairs(ESP.TargetTypes) do
            if obj:IsA(targetType) then
                return true
            end
        end
    end
    return false
end

-- Enhanced PrimaryPart detection with multiple fallbacks
local function GetPrimaryPart(obj)
    if not obj or not obj.Parent then return nil end
    
    if obj:IsA("Model") then
        -- Multiple fallback methods for models
        local part = obj.PrimaryPart or 
                    obj:FindFirstChild("HumanoidRootPart") or 
                    obj:FindFirstChild("Torso") or 
                    obj:FindFirstChild("UpperTorso") or 
                    obj:FindFirstChild("Head") or 
                    obj:FindFirstChild("Handle") or
                    obj:FindFirstChildWhichIsA("BasePart")
        return part
    elseif obj:IsA("BasePart") then
        return obj
    elseif obj:IsA("Tool") then
        return obj:FindFirstChild("Handle") or obj:FindFirstChildWhichIsA("BasePart")
    elseif obj:IsA("Attachment") and obj.Parent then
        return obj.Parent:IsA("BasePart") and obj.Parent or nil
    elseif obj:IsA("Accessory") or obj:IsA("Hat") then
        return obj:FindFirstChild("Handle") or obj:FindFirstChildWhichIsA("BasePart")
    end
    return nil
end

-- Smart folder detection with enhanced patterns
local function IsImportantFolder(folder)
    if not ESP.SmartDetection then return true end
    if not folder or not folder.Parent then return false end
    
    local name = folder.Name:lower()
    
    -- Enhanced detection patterns
    local importantPatterns = {
        -- Common game objects
        "pickup", "loot", "item", "chest", "boss", "enemy", "npc", "player", 
        "spawn", "active", "current", "live", "mob", "monster", "treasure",
        "collectible", "resource", "ore", "gem", "coin", "weapon", "tool",
        
        -- Specific game types
        "natural", "world", "zone", "area", "region", "dungeon", "raid",
        "quest", "mission", "objective", "target", "goal", "reward",
        
        -- Interactive elements
        "interactive", "clickable", "usable", "touchable", "proximity",
        "trigger", "detector", "sensor", "button", "lever", "switch",
        
        -- Containers and storage
        "inventory", "storage", "container", "bag", "backpack", "vault",
        "shop", "store", "merchant", "vendor", "trader", "market",
        
        -- Special objects
        "vehicle", "mount", "pet", "companion", "summon", "familiar",
        "portal", "teleport", "warp", "gate", "door", "entrance"
    }
    
    -- Check name patterns
    for _, pattern in pairs(importantPatterns) do
        if name:find(pattern) then
            return true
        end
    end
    
    -- Check if folder has target objects (deep scan)
    local function hasTargetObjects(parent, depth)
        if depth > 3 then return false end -- Limit depth for performance
        
        for _, child in pairs(parent:GetChildren()) do
            if IsTargetType(child) then
                return true
            elseif child:IsA("Folder") then
                if hasTargetObjects(child, depth + 1) then
                    return true
                end
            end
        end
        return false
    end
    
    return hasTargetObjects(folder, 0)
end

-- Enhanced recursive scanning with deep folder detection
local function ScanFolderRecursive(parent, parentPath, depth, maxDepth, foundObjects, processedFolders)
    if depth > maxDepth then return foundObjects end
    if not parent or not parent.Parent then return foundObjects end
    if processedFolders[parent] then return foundObjects end -- Prevent infinite loops
    
    processedFolders = processedFolders or {}
    processedFolders[parent] = true
    foundObjects = foundObjects or {}
    
    -- Filter folder before processing
    if not ESP.Filters.Folders(parent, parentPath, depth) then 
        return foundObjects 
    end
    
    -- Cache folder structure for faster future access
    if not ESP.FolderCache[parent] then
        ESP.FolderCache[parent] = {
            children = parent:GetChildren(),
            lastUpdate = tick(),
            hasTargets = false
        }
    end
    
    local children = ESP.FolderCache[parent].children
    
    -- Process all children with enhanced detection
    for _, child in pairs(children) do
        local currentPath = parentPath .. "." .. child.Name
        
        if child:IsA("Folder") then
            -- Enhanced folder detection - scan even nested folders
            if ESP.DeepScan or IsImportantFolder(child) then
                ScanFolderRecursive(child, currentPath, depth + 1, maxDepth, foundObjects, processedFolders)
            end
        elseif IsTargetType(child) then
            -- Apply all filters with enhanced validation
            if ESP.Filters.Objects(child, parent.Name, child.ClassName, currentPath, depth) and 
               ESP.Filters.Paths(currentPath) and 
               ESP.Filters.Names(child.Name) then
                
                table.insert(foundObjects, {
                    Object = child,
                    FolderName = parent.Name,
                    ObjectName = child.Name,
                    ObjectType = child.ClassName,
                    FullPath = currentPath,
                    Depth = depth,
                    ParentFolder = parent
                })
                
                ESP.FolderCache[parent].hasTargets = true
            end
        end
    end
    
    return foundObjects
end

-- Enhanced location scanning with deep detection
local function ScanLocation(location)
    if not location or not location.Parent then
        warn("Location not found or has no parent!")
        return {}
    end
    
    local foundObjects = {}
    local processedFolders = {}
    
    -- Direct children first (immediate objects)
    for _, child in pairs(location:GetChildren()) do
        if IsTargetType(child) then
            local currentPath = location.Name .. "." .. child.Name
            if ESP.Filters.Objects(child, location.Name, child.ClassName, currentPath, 0) and 
               ESP.Filters.Paths(currentPath) and 
               ESP.Filters.Names(child.Name) then
                
                table.insert(foundObjects, {
                    Object = child,
                    FolderName = location.Name,
                    ObjectName = child.Name,
                    ObjectType = child.ClassName,
                    FullPath = currentPath,
                    Depth = 0,
                    ParentFolder = location
                })
            end
        end
    end
    
    -- Enhanced deep folder scanning
    if ESP.ScanAllFolders then
        for _, child in pairs(location:GetChildren()) do
            if child:IsA("Folder") then
                -- Scan all folders, not just "important" ones for deep detection
                local nestedObjects = ScanFolderRecursive(child, location.Name .. "." .. child.Name, 1, ESP.MaxDepth, nil, processedFolders)
                if nestedObjects then
                    for _, objData in pairs(nestedObjects) do
                        table.insert(foundObjects, objData)
                    end
                end
            end
        end
    end
    
    return foundObjects
end

--ESP Core Functions--
function ESP:Toggle(bool)
    self.Enabled = bool
    if not bool then
        for i, v in pairs(self.Objects) do
            if v.Type == "Box" then
                if v.Temporary then
                    v:Remove()
                else
                    for _, component in pairs(v.Components) do
                        component.Visible = false
                    end
                end
            end
        end
    end
end

function ESP:GetBox(obj)
    return self.Objects[obj]
end

function ESP:SetHighlight(obj, color)
    self.Highlighted = obj
    self.HighlightColor = color or Color3.fromRGB(255, 0, 0)
end

function ESP:ClearHighlight()
    self.Highlighted = nil
end

-- Enhanced cleanup system
function ESP:CleanupListeners()
    for _, connection in pairs(self.Listeners) do
        if connection and connection.Connected then
            connection:Disconnect()
        end
    end
    self.Listeners = {}
    self.MonitoredFolders = {}
    self.FolderCache = {}
end

-- Enhanced Universal Object Listener with instant detection
function ESP:AddUniversalListener(location, options)
    options = options or {}
    
    -- If location is a string, find it in workspace
    if type(location) == "string" then
        location = workspace:FindFirstChild(location)
        if not location then
            warn("Location '" .. tostring(location) .. "' not found in workspace!")
            return
        end
    end
    
    -- Clean up existing listeners for this location
    if self.MonitoredFolders[location] then
        for _, connection in pairs(self.MonitoredFolders[location]) do
            if connection and connection.Connected then
                connection:Disconnect()
            end
        end
    end
    self.MonitoredFolders[location] = {}
    
    local function ProcessObject(objectData)
        local obj = objectData.Object
        local folderName = objectData.FolderName
        local objectName = objectData.ObjectName
        local objectType = objectData.ObjectType
        local fullPath = objectData.FullPath
        local depth = objectData.Depth
        
        if not options.Validator or options.Validator(obj, folderName, objectName, objectType, fullPath, depth) then
            local displayName = objectName
            
            -- Build display name based on settings
            if ESP.ShowFullPath then
                displayName = fullPath
            elseif ESP.ShowFolderName and ESP.ShowObjectType then
                displayName = folderName .. " - " .. objectName .. " (" .. objectType .. ")"
            elseif ESP.ShowFolderName then
                displayName = folderName .. " - " .. objectName
            elseif ESP.ShowObjectType then
                displayName = objectName .. " (" .. objectType .. ")"
            end
            
            local box = ESP:Add(obj, {
                PrimaryPart = GetPrimaryPart(obj),
                Color = type(options.Color) == "function" and options.Color(obj, folderName, objectName, objectType, fullPath, depth) or options.Color,
                ColorDynamic = options.ColorDynamic,
                Name = type(options.CustomName) == "function" and options.CustomName(obj, folderName, objectName, objectType, fullPath, depth) or displayName,
                IsEnabled = options.IsEnabled,
                RenderInNil = options.RenderInNil,
                Size = options.Size,
                Temporary = options.Temporary
            })
            
            if options.OnAdded then
                coroutine.wrap(options.OnAdded)(box, objectData)
            end
        end
    end
    
    -- Enhanced initial scan with progress tracking
    local function InitialScan()
        local allObjects = ScanLocation(location)
        
        -- Process in batches for better performance
        for i = 1, #allObjects, ESP.BatchSize do
            local batch = {}
            for j = i, math.min(i + ESP.BatchSize - 1, #allObjects) do
                table.insert(batch, allObjects[j])
            end
            
            for _, objectData in pairs(batch) do
                ProcessObject(objectData)
            end
            
            if i + ESP.BatchSize < #allObjects then
                task.wait() -- Yield between batches
            end
        end
    end
    
    InitialScan()
    
    -- Enhanced listener setup with instant detection
    local function SetupListeners(parent, parentPath, depth)
        if depth > ESP.MaxDepth then return end
        if self.MonitoredFolders[location][parent] then return end -- Already monitoring
        
        local connections = {}
        
        -- Enhanced child added listener with instant processing
        local addedConnection = parent.ChildAdded:Connect(function(child)
            if not ESP.AutoRefresh then return end
            
            -- Instant detection for target objects
            if ESP.InstantDetection and IsTargetType(child) then
                local currentPath = parentPath .. "." .. child.Name
                if ESP.Filters.Objects(child, parent.Name, child.ClassName, currentPath, depth) and 
                   ESP.Filters.Paths(currentPath) and 
                   ESP.Filters.Names(child.Name) then
                    
                    ProcessObject({
                        Object = child,
                        FolderName = parent.Name,
                        ObjectName = child.Name,
                        ObjectType = child.ClassName,
                        FullPath = currentPath,
                        Depth = depth,
                        ParentFolder = parent
                    })
                end
            end
            
            -- Small delay for folder processing to allow population
            task.wait(ESP.RefreshDelay)
            
            local currentPath = parentPath .. "." .. child.Name
            
            if child:IsA("Folder") then
                -- Set up listeners for new folder immediately
                SetupListeners(child, currentPath, depth + 1)
                
                -- Process existing objects in new folder with deep scan
                task.spawn(function()
                    local nestedObjects = ScanFolderRecursive(child, currentPath, depth + 1, ESP.MaxDepth)
                    if nestedObjects then
                        for _, objData in pairs(nestedObjects) do
                            ProcessObject(objData)
                        end
                    end
                end)
            end
        end)
        
        -- Enhanced child removed listener for cleanup
        local removedConnection = parent.ChildRemoved:Connect(function(child)
            if ESP.Objects[child] then
                ESP.Objects[child]:Remove()
            end
            
            -- Clear cache for removed folders
            if child:IsA("Folder") and ESP.FolderCache[child] then
                ESP.FolderCache[child] = nil
            end
        end)
        
        connections[#connections + 1] = addedConnection
        connections[#connections + 1] = removedConnection
        
        self.MonitoredFolders[location][parent] = connections
        
        -- Store in main listeners table
        for _, connection in pairs(connections) do
            table.insert(self.Listeners, connection)
        end
    end
    
    -- Set up listeners for the main location
    SetupListeners(location, location.Name, 0)
    
    -- Enhanced setup for existing folders with deep recursion
    local function SetupExistingFolders(parent, parentPath, depth)
        if depth > ESP.MaxDepth then return end
        
        for _, child in pairs(parent:GetChildren()) do
            if child:IsA("Folder") then
                local currentPath = parentPath .. "." .. child.Name
                SetupListeners(child, currentPath, depth + 1)
                SetupExistingFolders(child, currentPath, depth + 1)
            end
        end
    end
    
    SetupExistingFolders(location, location.Name, 0)
    
    return location -- Return location for chaining
end

-- Enhanced convenience methods
function ESP:AddNaturalPickupsListener(options)
    return self:AddUniversalListener("NaturalPickups", options)
end

function ESP:AddWorkspaceListener(options)
    return self:AddUniversalListener(workspace, options)
end

function ESP:AddActiveListener(options)
    return self:AddUniversalListener("Active", options)
end

function ESP:AddSpawnsListener(options)
    return self:AddUniversalListener("Spawns", options)
end

-- SIMPLE FUNCTION: Add ESP for any folder by name only with deep search
function ESP:AddFolderByName(folderName, options)
    options = options or {}
    
    -- Function to find folder anywhere in workspace recursively
    local function findFolder(parent, name, depth)
        if depth > 15 then return nil end -- Prevent infinite recursion
        
        for _, child in pairs(parent:GetChildren()) do
            if child.Name == name and child:IsA("Folder") then
                return child
            elseif child:IsA("Folder") then
                local found = findFolder(child, name, depth + 1)
                if found then return found end
            end
        end
        return nil
    end
    
    -- Find the folder
    local targetFolder = findFolder(workspace, folderName, 0)
    if not targetFolder then
        warn("Folder '" .. folderName .. "' not found in workspace!")
        return false
    end
    
    print("Found folder:", targetFolder:GetFullName())
    
    -- Add ESP listener for the found folder with enhanced options
    self:AddUniversalListener(targetFolder, {
        Color = options.Color or self.Color,
        CustomName = options.CustomName or function(obj, folderName, objectName, objectType, fullPath, depth)
            -- Default naming: show folder context and object info
            local displayName = objectName
            if self.ShowFolderName and self.ShowObjectType then
                displayName = folderName .. " - " .. objectName .. " (" .. objectType .. ")"
            elseif self.ShowFolderName then
                displayName = folderName .. " - " .. objectName
            elseif self.ShowObjectType then
                displayName = objectName .. " (" .. objectType .. ")"
            end
            return displayName
        end,
        Validator = options.Validator or function(obj, folderName, objectName, objectType, fullPath, depth)
            -- Default validator: accept all objects
            return true
        end,
        OnAdded = options.OnAdded or function(box, objectData)
            -- Default callback: print detection info
            print("Object detected:", objectData.ObjectName, "Type:", objectData.ObjectType, "Path:", objectData.FullPath)
        end,
        ColorDynamic = options.ColorDynamic,
        IsEnabled = options.IsEnabled,
        RenderInNil = options.RenderInNil,
        Size = options.Size,
        Temporary = options.Temporary
    })
    
    return targetFolder
end

-- SIMPLE FUNCTION: Add ESP for multiple folders by names
function ESP:AddFoldersByNames(folderNames, options)
    options = options or {}
    local foundFolders = {}
    
    for _, folderName in pairs(folderNames) do
        local folder = self:AddFolderByName(folderName, options)
        if folder then
            table.insert(foundFolders, folder)
        end
    end
    
    return foundFolders
end

-- SIMPLE FUNCTION: Quick setup for common game folders
function ESP:AddCommonGameFolders(options)
    local commonFolders = {
        "SimpleMonsterAI",
        "NaturalPickups", 
        "Active",
        "Spawns",
        "Mobs",
        "Enemies",
        "Items",
        "Pickups",
        "Loot",
        "Chests",
        "NPCs",
        "Bosses"
    }
    
    return self:AddFoldersByNames(commonFolders, options)
end

-- SIMPLE FUNCTION: Add ESP with automatic folder detection patterns
function ESP:AddSmartFolderDetection(patterns, options)
    patterns = patterns or {"Monster", "Enemy", "Pickup", "Item", "Loot", "Chest", "NPC", "Boss"}
    options = options or {}
    
    local function findFoldersByPattern(parent, patterns, depth, foundFolders)
        if depth > 15 then return foundFolders end
        foundFolders = foundFolders or {}
        
        for _, child in pairs(parent:GetChildren()) do
            if child:IsA("Folder") then
                -- Check if folder name matches any pattern
                for _, pattern in pairs(patterns) do
                    if child.Name:lower():find(pattern:lower()) then
                        table.insert(foundFolders, child)
                        print("Smart detection found:", child:GetFullName())
                        break
                    end
                end
                
                -- Continue searching in subfolders
                findFoldersByPattern(child, patterns, depth + 1, foundFolders)
            end
        end
        
        return foundFolders
    end
    
    local foundFolders = findFoldersByPattern(workspace, patterns, 0)
    
    -- Add ESP listeners for all found folders
    for _, folder in pairs(foundFolders) do
        self:AddUniversalListener(folder, {
            Color = options.Color or self.Color,
            CustomName = options.CustomName or function(obj, folderName, objectName, objectType, fullPath, depth)
                return "[" .. folderName .. "] " .. objectName .. " (" .. objectType .. ")"
            end,
            Validator = options.Validator,
            OnAdded = options.OnAdded,
            ColorDynamic = options.ColorDynamic,
            IsEnabled = options.IsEnabled,
            RenderInNil = options.RenderInNil,
            Size = options.Size,
            Temporary = options.Temporary
        })
    end
    
    return foundFolders
end

-- Enhanced configuration methods
function ESP:SetTargetTypes(types)
    self.TargetTypes = types
    self.ScanAllTypes = false
end

function ESP:AddTargetType(typeName)
    if not table.find(self.TargetTypes, typeName) then
        table.insert(self.TargetTypes, typeName)
    end
end

function ESP:RemoveTargetType(typeName)
    local index = table.find(self.TargetTypes, typeName)
    if index then
        table.remove(self.TargetTypes, index)
    end
end

-- Enhanced management methods
function ESP:ClearAll()
    for obj, box in pairs(self.Objects) do
        box:Remove()
    end
    self:CleanupListeners()
end

function ESP:GetAllObjects()
    return self.Objects
end

function ESP:GetCount()
    local count = 0
    for _ in pairs(self.Objects) do
        count = count + 1
    end
    return count
end

function ESP:GetObjectsByType(objectType)
    local objects = {}
    for obj, box in pairs(self.Objects) do
        if obj.ClassName == objectType then
            table.insert(objects, {object = obj, box = box})
        end
    end
    return objects
end

function ESP:GetObjectsByFolder(folderName)
    local objects = {}
    for obj, box in pairs(self.Objects) do
        if box.FolderName == folderName then
            table.insert(objects, {object = obj, box = box})
        end
    end
    return objects
end

-- Performance monitoring
function ESP:GetPerformanceStats()
    return {
        ObjectCount = self:GetCount(),
        ListenerCount = #self.Listeners,
        MonitoredFolders = #self.MonitoredFolders,
        CachedFolders = #self.FolderCache
    }
end

-- Cache management
function ESP:ClearCache()
    self.FolderCache = {}
end

function ESP:RefreshCache()
    self:ClearCache()
    -- Trigger re-scan of all monitored locations
    for location, _ in pairs(self.MonitoredFolders) do
        if location and location.Parent then
            local allObjects = ScanLocation(location)
            -- Process new objects found in refresh
        end
    end
end

--Enhanced Box Class--
local boxBase = {}
boxBase.__index = boxBase

function boxBase:Remove()
    ESP.Objects[self.Object] = nil
    for i, v in pairs(self.Components) do
        v.Visible = false
        v:Remove()
        self.Components[i] = nil
    end
end

function boxBase:SetColor(color)
    self.Color = color
end

function boxBase:SetName(name)
    self.Name = name
end

function boxBase:Update()
    if not self.PrimaryPart or not self.PrimaryPart.Parent then
        return self:Remove()
    end

    local color = self.Color or ESP.Color
    
    -- Dynamic color support
    if self.ColorDynamic and type(self.ColorDynamic) == "function" then
        color = self.ColorDynamic(self.Object) or color
    end
    
    -- Highlight override
    if ESP.Highlighted == self.Object then
        color = ESP.HighlightColor
    end

    -- Check if should render
    local allow = true
    
    -- Distance check with optimization
    local distance = GetDistance(cam.CFrame.Position, self.PrimaryPart.Position)
    if distance > ESP.MaxDistance then
        allow = false
    end
    
    -- Enabled check
    if self.IsEnabled and (type(self.IsEnabled) == "string" and not ESP[self.IsEnabled] or 
                          type(self.IsEnabled) == "function" and not self:IsEnabled()) then
        allow = false
    end
    
    -- Parent check with better validation
    if not self.RenderInNil then
        if not self.PrimaryPart.Parent or not workspace:IsAncestorOf(self.PrimaryPart) then
            allow = false
        end
    end

    if not allow then
        for i, v in pairs(self.Components) do
            v.Visible = false
        end
        return
    end

    -- Enhanced calculations
    local cf = self.PrimaryPart.CFrame
    if ESP.FaceCamera then
        cf = CFrame.new(cf.Position, cam.CFrame.Position)
    end
    
    local size = self.Size
    local locs = {
        TopLeft = cf * ESP.BoxShift * CFrame.new(size.X/2, size.Y/2, 0),
        TopRight = cf * ESP.BoxShift * CFrame.new(-size.X/2, size.Y/2, 0),
        BottomLeft = cf * ESP.BoxShift * CFrame.new(size.X/2, -size.Y/2, 0),
        BottomRight = cf * ESP.BoxShift * CFrame.new(-size.X/2, -size.Y/2, 0),
        TagPos = cf * ESP.BoxShift * CFrame.new(0, size.Y/2, 0),
        Torso = cf * ESP.BoxShift
    }

    -- Enhanced box rendering
    if ESP.Boxes then
        local TopLeft, Vis1 = WorldToViewportPoint(cam, locs.TopLeft.Position)
        local TopRight, Vis2 = WorldToViewportPoint(cam, locs.TopRight.Position)
        local BottomLeft, Vis3 = WorldToViewportPoint(cam, locs.BottomLeft.Position)
        local BottomRight, Vis4 = WorldToViewportPoint(cam, locs.BottomRight.Position)

        if self.Components.Quad then
            if Vis1 or Vis2 or Vis3 or Vis4 then
                self.Components.Quad.Visible = true
                self.Components.Quad.PointA = V2new(TopRight.X, TopRight.Y)
                self.Components.Quad.PointB = V2new(TopLeft.X, TopLeft.Y)
                self.Components.Quad.PointC = V2new(BottomLeft.X, BottomLeft.Y)
                self.Components.Quad.PointD = V2new(BottomRight.X, BottomRight.Y)
                self.Components.Quad.Color = color
            else
                self.Components.Quad.Visible = false
            end
        end
    else
        if self.Components.Quad then
            self.Components.Quad.Visible = false
        end
    end

    -- Enhanced text rendering
    if ESP.Names or ESP.Distance then
        local TagPos, Vis5 = WorldToViewportPoint(cam, locs.TagPos.Position)
        
        if Vis5 then
            local yOffset = 0
            
            -- Name
            if ESP.Names and self.Components.Name then
                self.Components.Name.Visible = true
                self.Components.Name.Position = V2new(TagPos.X, TagPos.Y + yOffset)
                self.Components.Name.Text = self.Name
                self.Components.Name.Color = color
                yOffset = yOffset + ESP.TextSize + 2
            end
            
            -- Distance
            if ESP.Distance and self.Components.Distance then
                self.Components.Distance.Visible = true
                self.Components.Distance.Position = V2new(TagPos.X, TagPos.Y + yOffset)
                self.Components.Distance.Text = floor(distance) .. "m"
                self.Components.Distance.Color = color
            end
        else
            if self.Components.Name then self.Components.Name.Visible = false end
            if self.Components.Distance then self.Components.Distance.Visible = false end
        end
    end
end

function ESP:Add(obj, options)
    if not obj.Parent and not options.RenderInNil then
        return warn(obj, "has no parent")
    end

    options = options or {}
    
    local box = setmetatable({
        Name = options.Name or obj.Name,
        Type = "Box",
        Color = options.Color,
        Size = options.Size or self.BoxSize,
        Object = obj,
        PrimaryPart = options.PrimaryPart or GetPrimaryPart(obj),
        Components = {},
        IsEnabled = options.IsEnabled,
        Temporary = options.Temporary,
        ColorDynamic = options.ColorDynamic,
        RenderInNil = options.RenderInNil,
        FolderName = options.FolderName
    }, boxBase)

    if self:GetBox(obj) then
        self:GetBox(obj):Remove()
    end

    -- Create enhanced components
    box.Components["Quad"] = Draw("Quad", {
        Thickness = self.Thickness,
        Color = box.Color or self.Color,
        Transparency = 1,
        Filled = false,
        Visible = false
    })
    
    box.Components["Name"] = Draw("Text", {
        Text = box.Name,
        Color = box.Color or self.Color,
        Center = true,
        Outline = self.TextOutline,
        Size = self.TextSize,
        Visible = false
    })
    
    box.Components["Distance"] = Draw("Text", {
        Color = box.Color or self.Color,
        Center = true,
        Outline = self.TextOutline,
        Size = self.TextSize,
        Visible = false
    })
    
    self.Objects[obj] = box
    
    -- Enhanced cleanup connections
    local connections = {}
    
    connections[#connections + 1] = obj.AncestryChanged:Connect(function(_, parent)
        if parent == nil and self.AutoRemove ~= false then
            box:Remove()
        end
    end)
    
    connections[#connections + 1] = obj:GetPropertyChangedSignal("Parent"):Connect(function()
        if obj.Parent == nil and self.AutoRemove ~= false then
            box:Remove()
        end
    end)
    
    -- Store connections for cleanup
    box.Connections = connections

    return box
end

-- Enhanced main update loop with performance optimization
local lastUpdate = 0
runService.RenderStepped:Connect(function()
    if not ESP.Enabled then return end
    
    local now = tick()
    if now - lastUpdate < (1 / ESP.UpdateRate) then return end
    lastUpdate = now
    
    cam = workspace.CurrentCamera
    
    local objectCount = 0
    for i, v in pairs(ESP.Objects) do
        if v.Update then
            local s, e = pcall(v.Update, v)
            if not s then 
                warn("[ESP Error]", e, v.Object:GetFullName()) 
            end
        end
        
        objectCount = objectCount + 1
        
        -- Yield periodically for performance
        if objectCount % ESP.BatchSize == 0 then
            task.wait()
        end
    end
end)

return ESP

--[[
    Enhanced Usage Examples:

    1. Basic ESP with deep folder detection:
    ESP:Toggle(true)
    ESP.DeepScan = true
    ESP.InstantDetection = true
    ESP:AddUniversalListener("NaturalPickups")

    2. ESP with enhanced nested folder scanning:
    ESP.MaxDepth = 20
    ESP.ScanAllFolders = true
    ESP:AddUniversalListener("SomeFolder")

    3. ESP with instant target detection:
    ESP.InstantDetection = true
    ESP.RefreshDelay = 0.05
    ESP:AddUniversalListener("SomeFolder")

    4. ESP with enhanced filters for deep structures:
    ESP.Filters.Objects = function(obj, folderName, objectType, fullPath, depth)
        return depth <= 10 and objectType == "Part" and obj.Name:find("Important")
    end
    ESP.Filters.Folders = function(folder, folderPath, depth)
        return depth <= 15 and not folder.Name:find("Ignore")
    end
    ESP:AddUniversalListener("SomeFolder")

    5. ESP with performance optimization for deep scanning:
    ESP.BatchSize = 50
    ESP.UpdateRate = 30
    ESP.MaxDepth = 25
    ESP:AddUniversalListener("LargeNestedFolder")

    6. ESP with enhanced target types:
    ESP:SetTargetTypes({"Model", "Part", "MeshPart", "UnionOperation"})
    ESP.ScanAllTypes = false
    ESP:AddUniversalListener("SomeFolder")

    7. Multiple deep location monitoring:
    ESP:AddUniversalListener("Active")
    ESP:AddUniversalListener("Spawns")
    ESP:AddUniversalListener("World")
    ESP:AddNaturalPickupsListener()

    8. Performance monitoring for deep scans:
    local stats = ESP:GetPerformanceStats()
    print("Objects:", stats.ObjectCount, "Listeners:", stats.ListenerCount, "Cached:", stats.CachedFolders)

    9. Cache management for better performance:
    ESP:ClearCache() -- Clear folder cache
    ESP:RefreshCache() -- Refresh all cached data

    10. Enhanced cleanup:
    ESP:ClearAll() -- Cleans objects, listeners, and cache
]]
