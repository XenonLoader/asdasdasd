--[[
    Enhanced Universal ESP System
    Structure: Any workspace location -> Folder -> Any Object Type
    ESP Name: Uses Object name directly
    Supports: Model, BasePart, MeshPart, Part, UnionOperation, and more
    Works with: Any folder structure in workspace
    Features: Auto re-detection, BoxHandleAdornment rendering, improved performance
]]

--Settings--
local ESP = {
    -- Core Settings
    Enabled = false,
    AutoRemove = true,
    AutoRedetect = true,    -- Automatically re-detect missing objects
    
    -- Visual Settings
    Boxes = true,
    BoxShift = CFrame.new(0, -1.5, 0),
    BoxSize = Vector3.new(4, 6, 0),
    Color = Color3.fromRGB(255, 170, 0),
    FaceCamera = false,
    Thickness = 2,
    Transparency = 0.5,     -- For BoxHandleAdornment
    
    -- Text Settings
    Names = true,
    Distance = true,
    Health = false,
    TextSize = 16,
    TextOutline = true,
    
    -- Universal Settings
    ShowFolderName = false, -- Show folder name in ESP
    ShowObjectType = true,  -- Show object type in ESP
    ShowFullPath = false,   -- Show full path in ESP
    
    -- Object Type Settings
    TargetTypes = {"Model", "BasePart", "MeshPart", "Part", "UnionOperation", "WedgePart", "CornerWedgePart", "TrussPart", "SpawnLocation"}, -- Types to ESP
    ScanAllTypes = true,    -- Scan all object types (overrides TargetTypes)
    
    -- Scanning Settings
    MaxDepth = 10,          -- Maximum folder depth to scan
    ScanAllFolders = true,  -- Recursively scan all folders
    RedetectInterval = 2,   -- Seconds between re-detection scans
    
    -- Performance Settings
    MaxDistance = 1000,
    UpdateRate = 60,
    
    -- Storage
    Objects = setmetatable({}, {__mode="kv"}),
    Overrides = {},
    Listeners = {},         -- Store active listeners for re-detection
    
    -- Highlight System
    Highlighted = nil,
    HighlightColor = Color3.fromRGB(255, 0, 0),
    
    -- Filters
    Filters = {
        Objects = function(object, folderName, objectType) return true end,
        Folders = function(folder) return true end,
        Paths = function(fullPath) return true end
    }
}

--Declarations--
local cam = workspace.CurrentCamera
local plrs = game:GetService("Players")
local plr = plrs.LocalPlayer
local runService = game:GetService("RunService")

local V3new = Vector3.new
local V2new = Vector2.new
local WorldToViewportPoint = cam.WorldToViewportPoint
local floor = math.floor

--Utility Functions--
local function CreateBillboardGui()
    local billboard = Instance.new("BillboardGui")
    billboard.Size = UDim2.new(0, 200, 0, 50)
    billboard.StudsOffset = Vector3.new(0, 2, 0)
    billboard.AlwaysOnTop = true
    billboard.LightInfluence = 0
    return billboard
end

local function CreateTextLabel(text, color)
    local label = Instance.new("TextLabel")
    label.Size = UDim2.new(1, 0, 1, 0)
    label.BackgroundTransparency = 1
    label.Text = text
    label.TextColor3 = color
    label.TextSize = ESP.TextSize
    label.TextStrokeTransparency = ESP.TextOutline and 0 or 1
    label.TextStrokeColor3 = Color3.new(0, 0, 0)
    label.Font = Enum.Font.SourceSansBold
    label.TextScaled = true
    return label
end

local function GetDistance(pos1, pos2)
    return (pos1 - pos2).Magnitude
end

-- Check if object is a target type
local function IsTargetType(obj)
    if ESP.ScanAllTypes then
        -- Check if it's any kind of part or model
        return obj:IsA("BasePart") or obj:IsA("Model")
    else
        -- Check specific target types
        for _, targetType in pairs(ESP.TargetTypes) do
            if obj:IsA(targetType) then
                return true
            end
        end
    end
    return false
end

-- Get appropriate PrimaryPart for different object types
local function GetPrimaryPart(obj)
    if obj:IsA("Model") then
        return obj.PrimaryPart or obj:FindFirstChild("HumanoidRootPart") or obj:FindFirstChildWhichIsA("BasePart")
    elseif obj:IsA("BasePart") then
        return obj
    end
    return nil
end

-- Universal Scanning Functions
local function ScanFolderRecursive(parent, parentPath, depth, maxDepth, foundObjects)
    if depth > maxDepth then return end
    if not ESP.Filters.Folders(parent) then return end
    
    foundObjects = foundObjects or {}
    
    for _, child in pairs(parent:GetChildren()) do
        local currentPath = parentPath .. "." .. child.Name
        
        if child:IsA("Folder") then
            -- Recursively scan subfolders
            ScanFolderRecursive(child, currentPath, depth + 1, maxDepth, foundObjects)
        elseif IsTargetType(child) then
            -- Found target object
            if ESP.Filters.Objects(child, parent.Name, child.ClassName) and ESP.Filters.Paths(currentPath) then
                table.insert(foundObjects, {
                    Object = child,
                    FolderName = parent.Name,
                    ObjectName = child.Name,
                    ObjectType = child.ClassName,
                    FullPath = currentPath,
                    Depth = depth
                })
            end
        end
    end
    
    return foundObjects
end

local function ScanLocation(location)
    if not location then
        warn("Location not found!")
        return {}
    end
    
    local foundObjects = {}
    
    -- Direct children first
    for _, child in pairs(location:GetChildren()) do
        if IsTargetType(child) then
            if ESP.Filters.Objects(child, location.Name, child.ClassName) then
                table.insert(foundObjects, {
                    Object = child,
                    FolderName = location.Name,
                    ObjectName = child.Name,
                    ObjectType = child.ClassName,
                    FullPath = location.Name .. "." .. child.Name,
                    Depth = 0
                })
            end
        end
    end
    
    -- Then scan folders recursively
    if ESP.ScanAllFolders then
        for _, child in pairs(location:GetChildren()) do
            if child:IsA("Folder") then
                local nestedObjects = ScanFolderRecursive(child, location.Name .. "." .. child.Name, 1, ESP.MaxDepth)
                if nestedObjects then
                    for _, objData in pairs(nestedObjects) do
                        table.insert(foundObjects, objData)
                    end
                end
            end
        end
    end
    
    return foundObjects
end

--ESP Core Functions--
function ESP:Toggle(bool)
    self.Enabled = bool
    if not bool then
        for i, v in pairs(self.Objects) do
            if v.Type == "Box" then
                if v.Temporary then
                    v:Remove()
                else
                    for _, component in pairs(v.Components) do
                        if component then
                            component.Visible = false
                        end
                    end
                end
            end
        end
    end
end

function ESP:GetBox(obj)
    return self.Objects[obj]
end

function ESP:SetHighlight(obj, color)
    self.Highlighted = obj
    self.HighlightColor = color or Color3.fromRGB(255, 0, 0)
end

function ESP:ClearHighlight()
    self.Highlighted = nil
end

-- Auto Re-detection System
function ESP:StartRedetection(location, options)
    if not self.AutoRedetect then return end
    
    local listenerKey = tostring(location)
    if self.Listeners[listenerKey] then return end -- Already has redetection
    
    local function RedetectObjects()
        while self.AutoRedetect and self.Listeners[listenerKey] do
            local allObjects = ScanLocation(location)
            
            -- Check for new objects that don't have ESP yet
            for _, objectData in pairs(allObjects) do
                local obj = objectData.Object
                if not self:GetBox(obj) then
                    -- New object found, add ESP
                    self:ProcessSingleObject(objectData, options)
                end
            end
            
            -- Check for removed objects
            local objectsToRemove = {}
            for espObj, box in pairs(self.Objects) do
                if not espObj.Parent or not workspace:IsAncestorOf(espObj) then
                    table.insert(objectsToRemove, espObj)
                end
            end
            
            -- Remove ESP for deleted objects
            for _, obj in pairs(objectsToRemove) do
                local box = self:GetBox(obj)
                if box then
                    box:Remove()
                end
            end
            
            task.wait(self.RedetectInterval)
        end
    end
    
    self.Listeners[listenerKey] = {
        Location = location,
        Options = options,
        Thread = task.spawn(RedetectObjects)
    }
end

function ESP:StopRedetection(location)
    local listenerKey = tostring(location)
    local listener = self.Listeners[listenerKey]
    if listener then
        if listener.Thread then
            task.cancel(listener.Thread)
        end
        self.Listeners[listenerKey] = nil
    end
end

function ESP:ProcessSingleObject(objectData, options)
    local obj = objectData.Object
    local folderName = objectData.FolderName
    local objectName = objectData.ObjectName
    local objectType = objectData.ObjectType
    local fullPath = objectData.FullPath
    local depth = objectData.Depth
    
    if not options.Validator or options.Validator(obj, folderName, objectName, objectType, fullPath, depth) then
        local displayName = objectName
        
        -- Build display name based on settings
        if ESP.ShowFullPath then
            displayName = fullPath
        elseif ESP.ShowFolderName and ESP.ShowObjectType then
            displayName = folderName .. " - " .. objectName .. " (" .. objectType .. ")"
        elseif ESP.ShowFolderName then
            displayName = folderName .. " - " .. objectName
        elseif ESP.ShowObjectType then
            displayName = objectName .. " (" .. objectType .. ")"
        end
        
        local box = ESP:Add(obj, {
            PrimaryPart = GetPrimaryPart(obj),
            Color = type(options.Color) == "function" and options.Color(obj, folderName, objectName, objectType, fullPath, depth) or options.Color,
            ColorDynamic = options.ColorDynamic,
            Name = type(options.CustomName) == "function" and options.CustomName(obj, folderName, objectName, objectType, fullPath, depth) or displayName,
            IsEnabled = options.IsEnabled,
            RenderInNil = options.RenderInNil,
            Size = options.Size,
            Temporary = options.Temporary
        })
        
        if options.OnAdded then
            coroutine.wrap(options.OnAdded)(box, objectData)
        end
    end
end

-- Universal Object Listener
function ESP:AddUniversalListener(location, options)
    options = options or {}
    
    -- If location is a string, find it in workspace
    if type(location) == "string" then
        location = workspace:FindFirstChild(location)
        if not location then
            warn("Location '" .. tostring(location) .. "' not found in workspace!")
            return
        end
    end
    
    local function ProcessObject(objectData)
        self:ProcessSingleObject(objectData, options)
    end
    
    -- Initial scan
    local function InitialScan()
        local allObjects = ScanLocation(location)
        for _, objectData in pairs(allObjects) do
            ProcessObject(objectData)
        end
    end
    
    InitialScan()
    
    -- Start auto re-detection
    self:StartRedetection(location, options)
    
    -- Listen for new objects (immediate detection)
    local function SetupListeners(parent, parentPath, depth)
        if depth > ESP.MaxDepth then return end
        
        parent.ChildAdded:Connect(function(child)
            local currentPath = parentPath .. "." .. child.Name
            
            if child:IsA("Folder") then
                task.wait(0.1) -- Wait for folder to populate
                
                -- Set up listeners for new folder
                SetupListeners(child, currentPath, depth + 1)
                
                -- Process existing objects in new folder
                local nestedObjects = ScanFolderRecursive(child, currentPath, depth + 1, ESP.MaxDepth)
                if nestedObjects then
                    for _, objData in pairs(nestedObjects) do
                        ProcessObject(objData)
                    end
                end
            elseif IsTargetType(child) then
                if ESP.Filters.Objects(child, parent.Name, child.ClassName) and ESP.Filters.Paths(currentPath) then
                    ProcessObject({
                        Object = child,
                        FolderName = parent.Name,
                        ObjectName = child.Name,
                        ObjectType = child.ClassName,
                        FullPath = currentPath,
                        Depth = depth
                    })
                end
            end
        end)
        
        -- Listen for removed objects
        parent.ChildRemoved:Connect(function(child)
            local box = ESP:GetBox(child)
            if box then
                box:Remove()
            end
        end)
    end
    
    -- Set up listeners for the main location
    SetupListeners(location, location.Name, 0)
    
    -- Set up listeners for existing folders
    local function SetupExistingFolders(parent, parentPath, depth)
        if depth > ESP.MaxDepth then return end
        
        for _, child in pairs(parent:GetChildren()) do
            if child:IsA("Folder") then
                local currentPath = parentPath .. "." .. child.Name
                SetupListeners(child, currentPath, depth + 1)
                SetupExistingFolders(child, currentPath, depth + 1)
            end
        end
    end
    
    SetupExistingFolders(location, location.Name, 0)
end

-- Convenience methods for common locations
function ESP:AddNaturalPickupsListener(options)
    return self:AddUniversalListener("NaturalPickups", options)
end

function ESP:AddWorkspaceListener(options)
    return self:AddUniversalListener(workspace, options)
end

-- Add method to set target types
function ESP:SetTargetTypes(types)
    self.TargetTypes = types
end

-- Add method to add target type
function ESP:AddTargetType(typeName)
    if not table.find(self.TargetTypes, typeName) then
        table.insert(self.TargetTypes, typeName)
    end
end

-- Add method to remove target type
function ESP:RemoveTargetType(typeName)
    local index = table.find(self.TargetTypes, typeName)
    if index then
        table.remove(self.TargetTypes, index)
    end
end

-- Method to clear all ESP
function ESP:ClearAll()
    -- Stop all redetection threads
    for _, listener in pairs(self.Listeners) do
        if listener.Thread then
            task.cancel(listener.Thread)
        end
    end
    self.Listeners = {}
    
    -- Remove all ESP objects
    for obj, box in pairs(self.Objects) do
        box:Remove()
    end
end

-- Method to get all ESP objects
function ESP:GetAllObjects()
    return self.Objects
end

-- Method to get ESP count
function ESP:GetCount()
    local count = 0
    for _ in pairs(self.Objects) do
        count = count + 1
    end
    return count
end

--Box Class--
local boxBase = {}
boxBase.__index = boxBase

function boxBase:Remove()
    ESP.Objects[self.Object] = nil
    for i, v in pairs(self.Components) do
        if v then
            v:Destroy()
            self.Components[i] = nil
        end
    end
end

function boxBase:SetColor(color)
    self.Color = color
    if self.Components.BoxHandle then
        self.Components.BoxHandle.Color3 = color
    end
    if self.Components.NameLabel then
        self.Components.NameLabel.TextColor3 = color
    end
    if self.Components.DistanceLabel then
        self.Components.DistanceLabel.TextColor3 = color
    end
end

function boxBase:SetName(name)
    self.Name = name
    if self.Components.NameLabel then
        self.Components.NameLabel.Text = name
    end
end

function boxBase:Update()
    if not self.PrimaryPart or not self.PrimaryPart.Parent then
        return self:Remove()
    end

    local color = self.Color or ESP.Color
    
    -- Highlight override
    if ESP.Highlighted == self.Object then
        color = ESP.HighlightColor
    end

    -- Check if should render
    local allow = true
    
    -- Distance check
    local distance = GetDistance(cam.CFrame.Position, self.PrimaryPart.Position)
    if distance > ESP.MaxDistance then
        allow = false
    end
    
    -- Enabled check
    if self.IsEnabled and (type(self.IsEnabled) == "string" and not ESP[self.IsEnabled] or 
                          type(self.IsEnabled) == "function" and not self:IsEnabled()) then
        allow = false
    end
    
    -- Parent check
    if not workspace:IsAncestorOf(self.PrimaryPart) and not self.RenderInNil then
        allow = false
    end

    -- Update visibility
    local visible = allow and ESP.Enabled
    
    -- Update BoxHandleAdornment
    if self.Components.BoxHandle then
        self.Components.BoxHandle.Visible = visible and ESP.Boxes
        if visible and ESP.Boxes then
            self.Components.BoxHandle.Color3 = color
            self.Components.BoxHandle.Transparency = ESP.Transparency
            self.Components.BoxHandle.Size = self.Size
            
            if ESP.FaceCamera then
                local cf = CFrame.new(self.PrimaryPart.Position, cam.CFrame.Position)
                self.Components.BoxHandle.CFrame = cf * ESP.BoxShift
            else
                self.Components.BoxHandle.CFrame = self.PrimaryPart.CFrame * ESP.BoxShift
            end
        end
    end
    
    -- Update Name Billboard
    if self.Components.NameBillboard then
        self.Components.NameBillboard.Enabled = visible and ESP.Names
        if visible and ESP.Names and self.Components.NameLabel then
            self.Components.NameLabel.Text = self.Name
            self.Components.NameLabel.TextColor3 = color
            self.Components.NameLabel.TextSize = ESP.TextSize
        end
    end
    
    -- Update Distance Billboard
    if self.Components.DistanceBillboard then
        self.Components.DistanceBillboard.Enabled = visible and ESP.Distance
        if visible and ESP.Distance and self.Components.DistanceLabel then
            self.Components.DistanceLabel.Text = floor(distance) .. "m"
            self.Components.DistanceLabel.TextColor3 = color
            self.Components.DistanceLabel.TextSize = ESP.TextSize
        end
    end
end

function ESP:Add(obj, options)
    if not obj.Parent and not options.RenderInNil then
        return warn(obj, "has no parent")
    end

    options = options or {}
    
    local box = setmetatable({
        Name = options.Name or obj.Name,
        Type = "Box",
        Color = options.Color,
        Size = options.Size or self.BoxSize,
        Object = obj,
        PrimaryPart = options.PrimaryPart or obj.ClassName == "Model" and (obj.PrimaryPart or obj:FindFirstChild("HumanoidRootPart") or obj:FindFirstChildWhichIsA("BasePart")) or obj:IsA("BasePart") and obj,
        Components = {},
        IsEnabled = options.IsEnabled,
        Temporary = options.Temporary,
        ColorDynamic = options.ColorDynamic,
        RenderInNil = options.RenderInNil
    }, boxBase)

    if self:GetBox(obj) then
        self:GetBox(obj):Remove()
    end

    -- Create BoxHandleAdornment
    if box.PrimaryPart then
        box.Components.BoxHandle = Instance.new("BoxHandleAdornment")
        box.Components.BoxHandle.Size = box.Size
        box.Components.BoxHandle.Color3 = box.Color or self.Color
        box.Components.BoxHandle.Transparency = self.Transparency
        box.Components.BoxHandle.AlwaysOnTop = true
        box.Components.BoxHandle.ZIndex = 1
        box.Components.BoxHandle.Adornee = box.PrimaryPart
        box.Components.BoxHandle.Parent = box.PrimaryPart
        box.Components.BoxHandle.Visible = false
    end
    
    -- Create Name Billboard
    if box.PrimaryPart then
        box.Components.NameBillboard = CreateBillboardGui()
        box.Components.NameBillboard.StudsOffset = Vector3.new(0, box.Size.Y/2 + 1, 0)
        box.Components.NameBillboard.Parent = box.PrimaryPart
        box.Components.NameBillboard.Enabled = false
        
        box.Components.NameLabel = CreateTextLabel(box.Name, box.Color or self.Color)
        box.Components.NameLabel.Parent = box.Components.NameBillboard
    end
    
    -- Create Distance Billboard
    if box.PrimaryPart then
        box.Components.DistanceBillboard = CreateBillboardGui()
        box.Components.DistanceBillboard.StudsOffset = Vector3.new(0, box.Size.Y/2 + 2.5, 0)
        box.Components.DistanceBillboard.Parent = box.PrimaryPart
        box.Components.DistanceBillboard.Enabled = false
        
        box.Components.DistanceLabel = CreateTextLabel("0m", box.Color or self.Color)
        box.Components.DistanceLabel.Parent = box.Components.DistanceBillboard
    end
    
    self.Objects[obj] = box
    
    -- Enhanced cleanup connections
    local function cleanup()
        if self.AutoRemove ~= false then
            box:Remove()
        end
    end
    
    obj.AncestryChanged:Connect(function(_, parent)
        if parent == nil then
            cleanup()
        end
    end)
    
    obj:GetPropertyChangedSignal("Parent"):Connect(function()
        if obj.Parent == nil then
            cleanup()
        end
    end)
    
    -- Additional cleanup for models
    if obj:IsA("Model") then
        obj:GetPropertyChangedSignal("PrimaryPart"):Connect(function()
            local newPrimaryPart = GetPrimaryPart(obj)
            if newPrimaryPart ~= box.PrimaryPart then
                box.PrimaryPart = newPrimaryPart
                -- Update adornee
                if box.Components.BoxHandle then
                    box.Components.BoxHandle.Adornee = newPrimaryPart
                    box.Components.BoxHandle.Parent = newPrimaryPart
                end
                if box.Components.NameBillboard then
                    box.Components.NameBillboard.Parent = newPrimaryPart
                end
                if box.Components.DistanceBillboard then
                    box.Components.DistanceBillboard.Parent = newPrimaryPart
                end
            end
        end)
    end

    return box
end

-- Main update loop
runService.Heartbeat:Connect(function()
    cam = workspace.CurrentCamera
    for i, v in (ESP.Enabled and pairs or ipairs)(ESP.Objects) do
        if v.Update then
            local s, e = pcall(v.Update, v)
            if not s then 
                warn("[ESP Error]", e, v.Object:GetFullName()) 
            end
        end
    end
end)

return ESP

--[[
    Enhanced Features:

    1. Auto Re-detection:
    - Automatically detects when objects are removed or added
    - Configurable redetection interval
    - Immediate detection via ChildAdded/ChildRemoved events

    2. BoxHandleAdornment Rendering:
    - Better visual quality than Drawing API
    - 3D boxes that scale with distance
    - Always on top rendering
    - Proper transparency support

    3. Billboard GUI Text:
    - Cleaner text rendering
    - Better scaling and readability
    - Proper text stroke/outline

    4. Enhanced Cleanup:
    - Better memory management
    - Automatic cleanup of destroyed objects
    - Thread management for redetection

    Usage Examples:

    1. Basic usage with auto re-detection:
    ESP:Toggle(true)
    ESP:AddNaturalPickupsListener()

    2. Custom redetection interval:
    ESP.RedetectInterval = 1 -- Check every 1 second
    ESP:AddUniversalListener("SomeFolder")

    3. Disable auto re-detection:
    ESP.AutoRedetect = false
    ESP:AddUniversalListener("SomeFolder")

    4. Custom box appearance:
    ESP.Transparency = 0.3
    ESP.BoxSize = Vector3.new(6, 8, 6)
    ESP:AddUniversalListener("SomeFolder")

    5. Clear all ESP and stop redetection:
    ESP:ClearAll()
]]
